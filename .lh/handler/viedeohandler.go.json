{
    "sourceFile": "handler/viedeohandler.go",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 48,
            "patches": [
                {
                    "date": 1691485669879,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1691485689880,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,1 +1,44 @@\n-handler/viedeohandler.go\n\\ No newline at end of file\n+package handler\r\n+\r\n+import (\r\n+\t\"fmt\"\r\n+\t\"io/ioutil\"\r\n+\t\"net/http\"\r\n+\r\n+\t\"github.com/Coreychen4444/Douyin/service\"\r\n+\t\"github.com/gin-gonic/gin\"\r\n+)\r\n+\r\n+type VideoHandler struct {\r\n+\tvideoService *service.VideoService\r\n+}\r\n+\r\n+func NewVideoHandler(videoService *service.VideoService) *VideoHandler {\r\n+\treturn &VideoHandler{videoService: videoService}\r\n+}\r\n+\r\n+// PublishVideo 处理视频投稿请求\r\n+func (h *VideoHandler) PublishVideo(c *gin.Context) {\r\n+\ttoken := c.PostForm(\"token\")\r\n+\ttitle := c.PostForm(\"title\")\r\n+\tvideoFile, _, err := c.Request.FormFile(\"video\")\r\n+\tif err != nil {\r\n+\t\tc.JSON(http.StatusBadRequest, gin.H{\"status_code\": 1, \"status_msg\": \"无法解析上传的文件\"})\r\n+\t\treturn\r\n+\t}\r\n+\tdefer videoFile.Close()\r\n+\r\n+\tvideoData, err := ioutil.ReadAll(videoFile)\r\n+\tif err != nil {\r\n+\t\tc.JSON(http.StatusInternalServerError, gin.H{\"status_code\": 1, \"status_msg\": \"读取文件内容时出错\"})\r\n+\t\treturn\r\n+\t}\r\n+\r\n+\terr = h.videoService.PublishVideo(token, videoData, title)\r\n+\tif err != nil {\r\n+\t\tc.JSON(http.StatusInternalServerError, gin.H{\"status_code\": 1, \"status_msg\": err.Error()})\r\n+\t\treturn\r\n+\t}\r\n+\r\n+\tc.JSON(http.StatusOK, gin.H{\"status_code\": 0, \"status_msg\": \"视频投稿成功\"})\r\n+}\r\n"
                },
                {
                    "date": 1691486197653,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,9 +4,9 @@\n \t\"fmt\"\r\n \t\"io/ioutil\"\r\n \t\"net/http\"\r\n \r\n-\t\"github.com/Coreychen4444/Douyin/service\"\r\n+\t\"github.com/Coreychen4444/Users/service\"\r\n \t\"github.com/gin-gonic/gin\"\r\n )\r\n \r\n type VideoHandler struct {\r\n"
                },
                {
                    "date": 1691486207659,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,7 @@\n package handler\r\n \r\n import (\r\n-\t\"fmt\"\r\n \t\"io/ioutil\"\r\n \t\"net/http\"\r\n \r\n \t\"github.com/Coreychen4444/Users/service\"\r\n"
                },
                {
                    "date": 1691487335786,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,37 +7,41 @@\n \t\"github.com/Coreychen4444/Users/service\"\r\n \t\"github.com/gin-gonic/gin\"\r\n )\r\n \r\n+\r\n type VideoHandler struct {\r\n-\tvideoService *service.VideoService\r\n+\ts *service.VideoService\r\n }\r\n \r\n-func NewVideoHandler(videoService *service.VideoService) *VideoHandler {\r\n-\treturn &VideoHandler{videoService: videoService}\r\n+func NewVideoHandler(s *service.VideoService) *VideoHandler {\r\n+\treturn &VideoHandler{s: s}\r\n }\r\n \r\n-// PublishVideo 处理视频投稿请求\r\n+// 处理视频投稿请求\r\n func (h *VideoHandler) PublishVideo(c *gin.Context) {\r\n-\ttoken := c.PostForm(\"token\")\r\n-\ttitle := c.PostForm(\"title\")\r\n-\tvideoFile, _, err := c.Request.FormFile(\"video\")\r\n-\tif err != nil {\r\n-\t\tc.JSON(http.StatusBadRequest, gin.H{\"status_code\": 1, \"status_msg\": \"无法解析上传的文件\"})\r\n+\ttoken := c.GetHeader(\"Authorization\")\r\n+\tif token == \"\" {\r\n+\t\tc.JSON(http.StatusUnauthorized, gin.H{\"error\": \"Missing authorization token\"})\r\n \t\treturn\r\n \t}\r\n-\tdefer videoFile.Close()\r\n \r\n-\tvideoData, err := ioutil.ReadAll(videoFile)\r\n+\tvideoData, err := ioutil.ReadAll(c.Request.Body)\r\n \tif err != nil {\r\n-\t\tc.JSON(http.StatusInternalServerError, gin.H{\"status_code\": 1, \"status_msg\": \"读取文件内容时出错\"})\r\n+\t\tc.JSON(http.StatusBadRequest, gin.H{\"error\": \"Failed to read video data\"})\r\n \t\treturn\r\n \t}\r\n \r\n-\terr = h.videoService.PublishVideo(token, videoData, title)\r\n+\ttitle := c.PostForm(\"title\")\r\n+\tif title == \"\" {\r\n+\t\tc.JSON(http.StatusBadRequest, gin.H{\"error\": \"Video title cannot be empty\"})\r\n+\t\treturn\r\n+\t}\r\n+\r\n+\terr = h.s.PublishVideo(token, videoData, title)\r\n \tif err != nil {\r\n-\t\tc.JSON(http.StatusInternalServerError, gin.H{\"status_code\": 1, \"status_msg\": err.Error()})\r\n+\t\tc.JSON(http.StatusInternalServerError, gin.H{\"error\": fmt.Sprintf(\"Failed to publish video: %s\", err.Error())})\r\n \t\treturn\r\n \t}\r\n \r\n-\tc.JSON(http.StatusOK, gin.H{\"status_code\": 0, \"status_msg\": \"视频投稿成功\"})\r\n+\tc.JSON(http.StatusOK, gin.H{\"message\": \"Video published successfully\"})\r\n }\r\n"
                },
                {
                    "date": 1691487366196,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,8 @@\n package handler\r\n \r\n import (\r\n+\t\"fmt\"\r\n \t\"io/ioutil\"\r\n \t\"net/http\"\r\n \r\n \t\"github.com/Coreychen4444/Users/service\"\r\n"
                },
                {
                    "date": 1691496037627,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,13 +31,13 @@\n \t\tc.JSON(http.StatusBadRequest, gin.H{\"error\": \"Failed to read video data\"})\r\n \t\treturn\r\n \t}\r\n \r\n-\ttitle := c.PostForm(\"title\")\r\n-\tif title == \"\" {\r\n-\t\tc.JSON(http.StatusBadRequest, gin.H{\"error\": \"Video title cannot be empty\"})\r\n-\t\treturn\r\n-\t}\r\n+\t// title := c.PostForm(\"title\")\r\n+\t// if title == \"\" {\r\n+\t// \tc.JSON(http.StatusBadRequest, gin.H{\"error\": \"Video title cannot be empty\"})\r\n+\t// \treturn\r\n+\t// }\r\n \r\n \terr = h.s.PublishVideo(token, videoData, title)\r\n \tif err != nil {\r\n \t\tc.JSON(http.StatusInternalServerError, gin.H{\"error\": fmt.Sprintf(\"Failed to publish video: %s\", err.Error())})\r\n"
                },
                {
                    "date": 1691496058984,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,9 +31,9 @@\n \t\tc.JSON(http.StatusBadRequest, gin.H{\"error\": \"Failed to read video data\"})\r\n \t\treturn\r\n \t}\r\n \r\n-\t// title := c.PostForm(\"title\")\r\n+\t title := c.PostForm(\"title\")\r\n \t// if title == \"\" {\r\n \t// \tc.JSON(http.StatusBadRequest, gin.H{\"error\": \"Video title cannot be empty\"})\r\n \t// \treturn\r\n \t// }\r\n"
                },
                {
                    "date": 1691496640132,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,13 +31,13 @@\n \t\tc.JSON(http.StatusBadRequest, gin.H{\"error\": \"Failed to read video data\"})\r\n \t\treturn\r\n \t}\r\n \r\n-\t title := c.PostForm(\"title\")\r\n-\t// if title == \"\" {\r\n-\t// \tc.JSON(http.StatusBadRequest, gin.H{\"error\": \"Video title cannot be empty\"})\r\n-\t// \treturn\r\n-\t// }\r\n+\ttitle := c.PostForm(\"title\")\r\n+\tif title == \"\" {\r\n+\t\tc.JSON(http.StatusBadRequest, gin.H{\"error\": \"Video title cannot be empty\"})\r\n+\t\treturn\r\n+\t}\r\n \r\n \terr = h.s.PublishVideo(token, videoData, title)\r\n \tif err != nil {\r\n \t\tc.JSON(http.StatusInternalServerError, gin.H{\"error\": fmt.Sprintf(\"Failed to publish video: %s\", err.Error())})\r\n"
                },
                {
                    "date": 1691497336963,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,13 +31,13 @@\n \t\tc.JSON(http.StatusBadRequest, gin.H{\"error\": \"Failed to read video data\"})\r\n \t\treturn\r\n \t}\r\n \r\n-\ttitle := c.PostForm(\"title\")\r\n-\tif title == \"\" {\r\n-\t\tc.JSON(http.StatusBadRequest, gin.H{\"error\": \"Video title cannot be empty\"})\r\n-\t\treturn\r\n-\t}\r\n+\t// title := c.PostForm(\"title\")\r\n+\t// if title == \"\" {\r\n+\t// \tc.JSON(http.StatusBadRequest, gin.H{\"error\": \"Video title cannot be empty\"})\r\n+\t// \treturn\r\n+\t// }\r\n \r\n \terr = h.s.PublishVideo(token, videoData, title)\r\n \tif err != nil {\r\n \t\tc.JSON(http.StatusInternalServerError, gin.H{\"error\": fmt.Sprintf(\"Failed to publish video: %s\", err.Error())})\r\n"
                },
                {
                    "date": 1691497349698,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,9 +31,9 @@\n \t\tc.JSON(http.StatusBadRequest, gin.H{\"error\": \"Failed to read video data\"})\r\n \t\treturn\r\n \t}\r\n \r\n-\t// title := c.PostForm(\"title\")\r\n+\t title := c.PostForm(\"title\")\r\n \t// if title == \"\" {\r\n \t// \tc.JSON(http.StatusBadRequest, gin.H{\"error\": \"Video title cannot be empty\"})\r\n \t// \treturn\r\n \t// }\r\n"
                },
                {
                    "date": 1691497724902,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,12 +32,12 @@\n \t\treturn\r\n \t}\r\n \r\n \t title := c.PostForm(\"title\")\r\n-\t// if title == \"\" {\r\n-\t// \tc.JSON(http.StatusBadRequest, gin.H{\"error\": \"Video title cannot be empty\"})\r\n-\t// \treturn\r\n-\t// }\r\n+\tif title == \"\" {\r\n+\t\tc.JSON(http.StatusBadRequest, gin.H{\"error\": \"Video title cannot be empty\"})\r\n+\t\treturn\r\n+\t}\r\n \r\n \terr = h.s.PublishVideo(token, videoData, title)\r\n \tif err != nil {\r\n \t\tc.JSON(http.StatusInternalServerError, gin.H{\"error\": fmt.Sprintf(\"Failed to publish video: %s\", err.Error())})\r\n"
                },
                {
                    "date": 1691497732300,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,8 +32,9 @@\n \t\treturn\r\n \t}\r\n \r\n \t title := c.PostForm(\"title\")\r\n+\t title=\"teset\"\r\n \tif title == \"\" {\r\n \t\tc.JSON(http.StatusBadRequest, gin.H{\"error\": \"Video title cannot be empty\"})\r\n \t\treturn\r\n \t}\r\n"
                },
                {
                    "date": 1691497764784,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,9 +32,8 @@\n \t\treturn\r\n \t}\r\n \r\n \t title := c.PostForm(\"title\")\r\n-\t title=\"teset\"\r\n \tif title == \"\" {\r\n \t\tc.JSON(http.StatusBadRequest, gin.H{\"error\": \"Video title cannot be empty\"})\r\n \t\treturn\r\n \t}\r\n"
                },
                {
                    "date": 1691497827299,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,49 @@\n+package handler\r\n+\r\n+import (\r\n+\t\"fmt\"\r\n+\t\"io/ioutil\"\r\n+\t\"net/http\"\r\n+\r\n+\t\"github.com/Coreychen4444/Users/service\"\r\n+\t\"github.com/gin-gonic/gin\"\r\n+)\r\n+\r\n+\r\n+type VideoHandler struct {\r\n+\ts *service.VideoService\r\n+}\r\n+\r\n+func NewVideoHandler(s *service.VideoService) *VideoHandler {\r\n+\treturn &VideoHandler{s: s}\r\n+}\r\n+\r\n+// 处理视频投稿请求\r\n+func (h *VideoHandler) PublishVideo(c *gin.Context) {\r\n+\ttoken := c.GetHeader(\"Authorization\")\r\n+\tif token == \"\" {\r\n+\t\tc.JSON(http.StatusUnauthorized, gin.H{\"error\": \"Missing authorization token\"})\r\n+\t\treturn\r\n+\t}\r\n+\r\n+\tvideoData, err := ioutil.ReadAll(c.Request.Body)\r\n+\tif err != nil {\r\n+\t\tc.JSON(http.StatusBadRequest, gin.H{\"error\": \"Failed to read video data\"})\r\n+\t\treturn\r\n+\t}\r\n+\r\n+\t title := c.PostForm(\"title\")\r\n+\t title=\"test\"\r\n+\tif title == \"\" {\r\n+\t\tc.JSON(http.StatusBadRequest, gin.H{\"error\": \"Video title cannot be empty\"})\r\n+\t\treturn\r\n+\t}\r\n+\r\n+\terr = h.s.PublishVideo(token, videoData, title)\r\n+\tif err != nil {\r\n+\t\tc.JSON(http.StatusInternalServerError, gin.H{\"error\": fmt.Sprintf(\"Failed to publish video: %s\", err.Error())})\r\n+\t\treturn\r\n+\t}\r\n+\r\n+\tc.JSON(http.StatusOK, gin.H{\"message\": \"Video published successfully\"})\r\n+}\r\n"
                },
                {
                    "date": 1691499235752,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -45,53 +45,22 @@\n \t\treturn\r\n \t}\r\n \r\n \tc.JSON(http.StatusOK, gin.H{\"message\": \"Video published successfully\"})\r\n-}\r\n-package handler\r\n-\r\n-import (\r\n-\t\"fmt\"\r\n-\t\"io/ioutil\"\r\n-\t\"net/http\"\r\n-\r\n-\t\"github.com/Coreychen4444/Users/service\"\r\n-\t\"github.com/gin-gonic/gin\"\r\n-)\r\n-\r\n-\r\n-type VideoHandler struct {\r\n-\ts *service.VideoService\r\n-}\r\n-\r\n-func NewVideoHandler(s *service.VideoService) *VideoHandler {\r\n-\treturn &VideoHandler{s: s}\r\n-}\r\n-\r\n-// 处理视频投稿请求\r\n-func (h *VideoHandler) PublishVideo(c *gin.Context) {\r\n-\ttoken := c.GetHeader(\"Authorization\")\r\n-\tif token == \"\" {\r\n-\t\tc.JSON(http.StatusUnauthorized, gin.H{\"error\": \"Missing authorization token\"})\r\n+\t// 处理获取投稿视频请求\r\n+func (h *VideoHandler) GetVideo(c *gin.Context) {\r\n+\tvideoID := c.Param(\"video_id\") // 获取 URL 参数中的 video_id\r\n+\tif videoID == \"\" {\r\n+\t\tc.JSON(http.StatusBadRequest, gin.H{\"error\": \"Video ID cannot be empty\"})\r\n \t\treturn\r\n \t}\r\n \r\n-\tvideoData, err := ioutil.ReadAll(c.Request.Body)\r\n+\tvideo, err := h.s.GetVideoByID(videoID)\r\n \tif err != nil {\r\n-\t\tc.JSON(http.StatusBadRequest, gin.H{\"error\": \"Failed to read video data\"})\r\n+\t\tc.JSON(http.StatusNotFound, gin.H{\"error\": fmt.Sprintf(\"Video not found: %s\", err.Error())})\r\n \t\treturn\r\n \t}\r\n \r\n-\t title := c.PostForm(\"title\")\r\n-\tif title == \"\" {\r\n-\t\tc.JSON(http.StatusBadRequest, gin.H{\"error\": \"Video title cannot be empty\"})\r\n-\t\treturn\r\n-\t}\r\n+\tc.JSON(http.StatusOK, video)\r\n+}\r\n \r\n-\terr = h.s.PublishVideo(token, videoData, title)\r\n-\tif err != nil {\r\n-\t\tc.JSON(http.StatusInternalServerError, gin.H{\"error\": fmt.Sprintf(\"Failed to publish video: %s\", err.Error())})\r\n-\t\treturn\r\n-\t}\r\n-\r\n-\tc.JSON(http.StatusOK, gin.H{\"message\": \"Video published successfully\"})\r\n }\r\n"
                },
                {
                    "date": 1691499334480,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -45,22 +45,6 @@\n \t\treturn\r\n \t}\r\n \r\n \tc.JSON(http.StatusOK, gin.H{\"message\": \"Video published successfully\"})\r\n-\t// 处理获取投稿视频请求\r\n-func (h *VideoHandler) GetVideo(c *gin.Context) {\r\n-\tvideoID := c.Param(\"video_id\") // 获取 URL 参数中的 video_id\r\n-\tif videoID == \"\" {\r\n-\t\tc.JSON(http.StatusBadRequest, gin.H{\"error\": \"Video ID cannot be empty\"})\r\n-\t\treturn\r\n-\t}\r\n-\r\n-\tvideo, err := h.s.GetVideoByID(videoID)\r\n-\tif err != nil {\r\n-\t\tc.JSON(http.StatusNotFound, gin.H{\"error\": fmt.Sprintf(\"Video not found: %s\", err.Error())})\r\n-\t\treturn\r\n-\t}\r\n-\r\n-\tc.JSON(http.StatusOK, video)\r\n+\t\r\n }\r\n-\r\n-}\r\n"
                },
                {
                    "date": 1691499531829,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -47,4 +47,17 @@\n \r\n \tc.JSON(http.StatusOK, gin.H{\"message\": \"Video published successfully\"})\r\n \t\r\n }\r\n+// VideoHandler 类中的 GetPublishedVideos 函数\r\n+func (h *VideoHandler) GetPublishedVideos(c *gin.Context) {\r\n+\t// 在这里添加验证用户权限的代码，确保只有登录用户可以访问此接口\r\n+\t// 你可以使用鉴权 token 来进行验证\r\n+\r\n+\tvideos, err := h.s.GetPublishedVideos()\r\n+\tif err != nil {\r\n+\t\tc.JSON(http.StatusInternalServerError, gin.H{\"error\": fmt.Sprintf(\"Failed to get videos: %s\", err.Error())})\r\n+\t\treturn\r\n+\t}\r\n+\r\n+\tc.JSON(http.StatusOK, videos)\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1691500528917,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,9 +32,8 @@\n \t\treturn\r\n \t}\r\n \r\n \t title := c.PostForm(\"title\")\r\n-\t title=\"test\"\r\n \tif title == \"\" {\r\n \t\tc.JSON(http.StatusBadRequest, gin.H{\"error\": \"Video title cannot be empty\"})\r\n \t\treturn\r\n \t}\r\n"
                },
                {
                    "date": 1691500928392,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -58,5 +58,20 @@\n \t\treturn\r\n \t}\r\n \r\n \tc.JSON(http.StatusOK, videos)\r\n+}\r\n+func (h *VideoHandler) ReceiveTitle(c *gin.Context) {\r\n+\t// 从 POST 表单中获取标题\r\n+\ttitle := c.PostForm(\"title\")\r\n+\r\n+\t// 检查标题是否为空\r\n+\tif title == \"\" {\r\n+\t\tc.JSON(http.StatusBadRequest, gin.H{\"error\": \"Video title cannot be empty\"})\r\n+\t\treturn\r\n+\t}\r\n+\r\n+\t// 在这里处理接收到的标题，你可以根据需要进行进一步的操作\r\n+\r\n+\t// 返回成功响应\r\n+\tc.JSON(http.StatusOK, gin.H{\"message\": \"Title received successfully\"})\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1691501186788,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,62 @@\n+package handler\r\n+\r\n+import (\r\n+\t\"fmt\"\r\n+\t\"io/ioutil\"\r\n+\t\"net/http\"\r\n+\r\n+\t\"github.com/Coreychen4444/Users/service\"\r\n+\t\"github.com/gin-gonic/gin\"\r\n+)\r\n+\r\n+\r\n+type VideoHandler struct {\r\n+\ts *service.VideoService\r\n+}\r\n+\r\n+func NewVideoHandler(s *service.VideoService) *VideoHandler {\r\n+\treturn &VideoHandler{s: s}\r\n+}\r\n+\r\n+// 处理视频投稿请求\r\n+func (h *VideoHandler) PublishVideo(c *gin.Context) {\r\n+\ttoken := c.GetHeader(\"Authorization\")\r\n+\tif token == \"\" {\r\n+\t\tc.JSON(http.StatusUnauthorized, gin.H{\"error\": \"Missing authorization token\"})\r\n+\t\treturn\r\n+\t}\r\n+\r\n+\tvideoData, err := ioutil.ReadAll(c.Request.Body)\r\n+\tif err != nil {\r\n+\t\tc.JSON(http.StatusBadRequest, gin.H{\"error\": \"Failed to read video data\"})\r\n+\t\treturn\r\n+\t}\r\n+\r\n+\t title := c.PostForm(\"title\")\r\n+\tif title == \"\" {\r\n+\t\tc.JSON(http.StatusBadRequest, gin.H{\"error\": \"Video title cannot be empty\"})\r\n+\t\treturn\r\n+\t}\r\n+\r\n+\terr = h.s.PublishVideo(token, videoData, title)\r\n+\tif err != nil {\r\n+\t\tc.JSON(http.StatusInternalServerError, gin.H{\"error\": fmt.Sprintf(\"Failed to publish video: %s\", err.Error())})\r\n+\t\treturn\r\n+\t}\r\n+\r\n+\tc.JSON(http.StatusOK, gin.H{\"message\": \"Video published successfully\"})\r\n+\t\r\n+}\r\n+// VideoHandler 类中的 GetPublishedVideos 函数\r\n+func (h *VideoHandler) GetPublishedVideos(c *gin.Context) {\r\n+\t// 在这里添加验证用户权限的代码，确保只有登录用户可以访问此接口\r\n+\t// 你可以使用鉴权 token 来进行验证\r\n+\r\n+\tvideos, err := h.s.GetPublishedVideos()\r\n+\tif err != nil {\r\n+\t\tc.JSON(http.StatusInternalServerError, gin.H{\"error\": fmt.Sprintf(\"Failed to get videos: %s\", err.Error())})\r\n+\t\treturn\r\n+\t}\r\n+\r\n+\tc.JSON(http.StatusOK, videos)\r\n+}\r\n"
                },
                {
                    "date": 1691502039306,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,8 +32,9 @@\n \t\treturn\r\n \t}\r\n \r\n \t title := c.PostForm(\"title\")\r\n+\t \r\n \tif title == \"\" {\r\n \t\tc.JSON(http.StatusBadRequest, gin.H{\"error\": \"Video title cannot be empty\"})\r\n \t\treturn\r\n \t}\r\n@@ -59,81 +60,4 @@\n \t}\r\n \r\n \tc.JSON(http.StatusOK, videos)\r\n }\r\n-package handler\r\n-\r\n-import (\r\n-\t\"fmt\"\r\n-\t\"io/ioutil\"\r\n-\t\"net/http\"\r\n-\r\n-\t\"github.com/Coreychen4444/Users/service\"\r\n-\t\"github.com/gin-gonic/gin\"\r\n-)\r\n-\r\n-\r\n-type VideoHandler struct {\r\n-\ts *service.VideoService\r\n-}\r\n-\r\n-func NewVideoHandler(s *service.VideoService) *VideoHandler {\r\n-\treturn &VideoHandler{s: s}\r\n-}\r\n-\r\n-// 处理视频投稿请求\r\n-func (h *VideoHandler) PublishVideo(c *gin.Context) {\r\n-\ttoken := c.GetHeader(\"Authorization\")\r\n-\tif token == \"\" {\r\n-\t\tc.JSON(http.StatusUnauthorized, gin.H{\"error\": \"Missing authorization token\"})\r\n-\t\treturn\r\n-\t}\r\n-\r\n-\tvideoData, err := ioutil.ReadAll(c.Request.Body)\r\n-\tif err != nil {\r\n-\t\tc.JSON(http.StatusBadRequest, gin.H{\"error\": \"Failed to read video data\"})\r\n-\t\treturn\r\n-\t}\r\n-\r\n-\t title := c.PostForm(\"title\")\r\n-\tif title == \"\" {\r\n-\t\tc.JSON(http.StatusBadRequest, gin.H{\"error\": \"Video title cannot be empty\"})\r\n-\t\treturn\r\n-\t}\r\n-\r\n-\terr = h.s.PublishVideo(token, videoData, title)\r\n-\tif err != nil {\r\n-\t\tc.JSON(http.StatusInternalServerError, gin.H{\"error\": fmt.Sprintf(\"Failed to publish video: %s\", err.Error())})\r\n-\t\treturn\r\n-\t}\r\n-\r\n-\tc.JSON(http.StatusOK, gin.H{\"message\": \"Video published successfully\"})\r\n-\t\r\n-}\r\n-// VideoHandler 类中的 GetPublishedVideos 函数\r\n-func (h *VideoHandler) GetPublishedVideos(c *gin.Context) {\r\n-\t// 在这里添加验证用户权限的代码，确保只有登录用户可以访问此接口\r\n-\t// 你可以使用鉴权 token 来进行验证\r\n-\r\n-\tvideos, err := h.s.GetPublishedVideos()\r\n-\tif err != nil {\r\n-\t\tc.JSON(http.StatusInternalServerError, gin.H{\"error\": fmt.Sprintf(\"Failed to get videos: %s\", err.Error())})\r\n-\t\treturn\r\n-\t}\r\n-\r\n-\tc.JSON(http.StatusOK, videos)\r\n-}\r\n-func (h *VideoHandler) ReceiveTitle(c *gin.Context) {\r\n-\t// 从 POST 表单中获取标题\r\n-\ttitle := c.PostForm(\"title\")\r\n-\r\n-\t// 检查标题是否为空\r\n-\tif title == \"\" {\r\n-\t\tc.JSON(http.StatusBadRequest, gin.H{\"error\": \"Video title cannot be empty\"})\r\n-\t\treturn\r\n-\t}\r\n-\r\n-\t// 在这里处理接收到的标题，你可以根据需要进行进一步的操作\r\n-\r\n-\t// 返回成功响应\r\n-\tc.JSON(http.StatusOK, gin.H{\"message\": \"Title received successfully\"})\r\n-}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1691502046382,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,9 +32,9 @@\n \t\treturn\r\n \t}\r\n \r\n \t title := c.PostForm(\"title\")\r\n-\t \r\n+\t fmt.Println(title)\r\n \tif title == \"\" {\r\n \t\tc.JSON(http.StatusBadRequest, gin.H{\"error\": \"Video title cannot be empty\"})\r\n \t\treturn\r\n \t}\r\n"
                },
                {
                    "date": 1691502388257,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,63 @@\n+package handler\r\n+\r\n+import (\r\n+\t\"fmt\"\r\n+\t\"io/ioutil\"\r\n+\t\"net/http\"\r\n+\r\n+\t\"github.com/Coreychen4444/Users/service\"\r\n+\t\"github.com/gin-gonic/gin\"\r\n+)\r\n+\r\n+\r\n+type VideoHandler struct {\r\n+\ts *service.VideoService\r\n+}\r\n+\r\n+func NewVideoHandler(s *service.VideoService) *VideoHandler {\r\n+\treturn &VideoHandler{s: s}\r\n+}\r\n+\r\n+// 处理视频投稿请求\r\n+func (h *VideoHandler) PublishVideo(c *gin.Context) {\r\n+\ttoken := c.GetHeader(\"Authorization\")\r\n+\tif token == \"\" {\r\n+\t\tc.JSON(http.StatusUnauthorized, gin.H{\"error\": \"Missing authorization token\"})\r\n+\t\treturn\r\n+\t}\r\n+\r\n+\tvideoData, err := ioutil.ReadAll(c.Request.Body)\r\n+\tif err != nil {\r\n+\t\tc.JSON(http.StatusBadRequest, gin.H{\"error\": \"Failed to read video data\"})\r\n+\t\treturn\r\n+\t}\r\n+\r\n+\t title := c.Post(\"title\")\r\n+\t fmt.Println(title)\r\n+\tif title == \"\" {\r\n+\t\tc.JSON(http.StatusBadRequest, gin.H{\"error\": \"Video title cannot be empty\"})\r\n+\t\treturn\r\n+\t}\r\n+\r\n+\terr = h.s.PublishVideo(token, videoData, title)\r\n+\tif err != nil {\r\n+\t\tc.JSON(http.StatusInternalServerError, gin.H{\"error\": fmt.Sprintf(\"Failed to publish video: %s\", err.Error())})\r\n+\t\treturn\r\n+\t}\r\n+\r\n+\tc.JSON(http.StatusOK, gin.H{\"message\": \"Video published successfully\"})\r\n+\t\r\n+}\r\n+// VideoHandler 类中的 GetPublishedVideos 函数\r\n+func (h *VideoHandler) GetPublishedVideos(c *gin.Context) {\r\n+\t// 在这里添加验证用户权限的代码，确保只有登录用户可以访问此接口\r\n+\t// 你可以使用鉴权 token 来进行验证\r\n+\r\n+\tvideos, err := h.s.GetPublishedVideos()\r\n+\tif err != nil {\r\n+\t\tc.JSON(http.StatusInternalServerError, gin.H{\"error\": fmt.Sprintf(\"Failed to get videos: %s\", err.Error())})\r\n+\t\treturn\r\n+\t}\r\n+\r\n+\tc.JSON(http.StatusOK, videos)\r\n+}\r\n"
                },
                {
                    "date": 1691502397765,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,63 @@\n+package handler\r\n+\r\n+import (\r\n+\t\"fmt\"\r\n+\t\"io/ioutil\"\r\n+\t\"net/http\"\r\n+\r\n+\t\"github.com/Coreychen4444/Users/service\"\r\n+\t\"github.com/gin-gonic/gin\"\r\n+)\r\n+\r\n+\r\n+type VideoHandler struct {\r\n+\ts *service.VideoService\r\n+}\r\n+\r\n+func NewVideoHandler(s *service.VideoService) *VideoHandler {\r\n+\treturn &VideoHandler{s: s}\r\n+}\r\n+\r\n+// 处理视频投稿请求\r\n+func (h *VideoHandler) PublishVideo(c *gin.Context) {\r\n+\ttoken := c.GetHeader(\"Authorization\")\r\n+\tif token == \"\" {\r\n+\t\tc.JSON(http.StatusUnauthorized, gin.H{\"error\": \"Missing authorization token\"})\r\n+\t\treturn\r\n+\t}\r\n+\r\n+\tvideoData, err := ioutil.ReadAll(c.Request.Body)\r\n+\tif err != nil {\r\n+\t\tc.JSON(http.StatusBadRequest, gin.H{\"error\": \"Failed to read video data\"})\r\n+\t\treturn\r\n+\t}\r\n+\r\n+\t title := c.Request.PostForm.Get(\"title\")\r\n+\t fmt.Println(title)\r\n+\tif title == \"\" {\r\n+\t\tc.JSON(http.StatusBadRequest, gin.H{\"error\": \"Video title cannot be empty\"})\r\n+\t\treturn\r\n+\t}\r\n+\r\n+\terr = h.s.PublishVideo(token, videoData, title)\r\n+\tif err != nil {\r\n+\t\tc.JSON(http.StatusInternalServerError, gin.H{\"error\": fmt.Sprintf(\"Failed to publish video: %s\", err.Error())})\r\n+\t\treturn\r\n+\t}\r\n+\r\n+\tc.JSON(http.StatusOK, gin.H{\"message\": \"Video published successfully\"})\r\n+\t\r\n+}\r\n+// VideoHandler 类中的 GetPublishedVideos 函数\r\n+func (h *VideoHandler) GetPublishedVideos(c *gin.Context) {\r\n+\t// 在这里添加验证用户权限的代码，确保只有登录用户可以访问此接口\r\n+\t// 你可以使用鉴权 token 来进行验证\r\n+\r\n+\tvideos, err := h.s.GetPublishedVideos()\r\n+\tif err != nil {\r\n+\t\tc.JSON(http.StatusInternalServerError, gin.H{\"error\": fmt.Sprintf(\"Failed to get videos: %s\", err.Error())})\r\n+\t\treturn\r\n+\t}\r\n+\r\n+\tc.JSON(http.StatusOK, videos)\r\n+}\r\n"
                },
                {
                    "date": 1691502689088,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,63 @@\n+package handler\r\n+\r\n+import (\r\n+\t\"fmt\"\r\n+\t\"io/ioutil\"\r\n+\t\"net/http\"\r\n+\r\n+\t\"github.com/Coreychen4444/Users/service\"\r\n+\t\"github.com/gin-gonic/gin\"\r\n+)\r\n+\r\n+\r\n+type VideoHandler struct {\r\n+\ts *service.VideoService\r\n+}\r\n+\r\n+func NewVideoHandler(s *service.VideoService) *VideoHandler {\r\n+\treturn &VideoHandler{s: s}\r\n+}\r\n+\r\n+// 处理视频投稿请求\r\n+func (h *VideoHandler) PublishVideo(c *gin.Context) {\r\n+\ttoken := c.GetHeader(\"Authorization\")\r\n+\tif token == \"\" {\r\n+\t\tc.JSON(http.StatusUnauthorized, gin.H{\"error\": \"Missing authorization token\"})\r\n+\t\treturn\r\n+\t}\r\n+\r\n+\tvideoData, err := ioutil.ReadAll(c.Request.Body)\r\n+\tif err != nil {\r\n+\t\tc.JSON(http.StatusBadRequest, gin.H{\"error\": \"Failed to read video data\"})\r\n+\t\treturn\r\n+\t}\r\n+\r\n+\t title := c.Get(\"title\")\r\n+\t fmt.Println(title)\r\n+\tif title == \"\" {\r\n+\t\tc.JSON(http.StatusBadRequest, gin.H{\"error\": \"Video title cannot be empty\"})\r\n+\t\treturn\r\n+\t}\r\n+\r\n+\terr = h.s.PublishVideo(token, videoData, title)\r\n+\tif err != nil {\r\n+\t\tc.JSON(http.StatusInternalServerError, gin.H{\"error\": fmt.Sprintf(\"Failed to publish video: %s\", err.Error())})\r\n+\t\treturn\r\n+\t}\r\n+\r\n+\tc.JSON(http.StatusOK, gin.H{\"message\": \"Video published successfully\"})\r\n+\t\r\n+}\r\n+// VideoHandler 类中的 GetPublishedVideos 函数\r\n+func (h *VideoHandler) GetPublishedVideos(c *gin.Context) {\r\n+\t// 在这里添加验证用户权限的代码，确保只有登录用户可以访问此接口\r\n+\t// 你可以使用鉴权 token 来进行验证\r\n+\r\n+\tvideos, err := h.s.GetPublishedVideos()\r\n+\tif err != nil {\r\n+\t\tc.JSON(http.StatusInternalServerError, gin.H{\"error\": fmt.Sprintf(\"Failed to get videos: %s\", err.Error())})\r\n+\t\treturn\r\n+\t}\r\n+\r\n+\tc.JSON(http.StatusOK, videos)\r\n+}\r\n"
                },
                {
                    "date": 1691502697360,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,9 +31,9 @@\n \t\tc.JSON(http.StatusBadRequest, gin.H{\"error\": \"Failed to read video data\"})\r\n \t\treturn\r\n \t}\r\n \r\n-\t title := c.Get(\"title\")\r\n+\t title := c.Request.GetBody(\"title\")\r\n \t fmt.Println(title)\r\n \tif title == \"\" {\r\n \t\tc.JSON(http.StatusBadRequest, gin.H{\"error\": \"Video title cannot be empty\"})\r\n \t\treturn\r\n@@ -60,193 +60,4 @@\n \t}\r\n \r\n \tc.JSON(http.StatusOK, videos)\r\n }\r\n-package handler\r\n-\r\n-import (\r\n-\t\"fmt\"\r\n-\t\"io/ioutil\"\r\n-\t\"net/http\"\r\n-\r\n-\t\"github.com/Coreychen4444/Users/service\"\r\n-\t\"github.com/gin-gonic/gin\"\r\n-)\r\n-\r\n-\r\n-type VideoHandler struct {\r\n-\ts *service.VideoService\r\n-}\r\n-\r\n-func NewVideoHandler(s *service.VideoService) *VideoHandler {\r\n-\treturn &VideoHandler{s: s}\r\n-}\r\n-\r\n-// 处理视频投稿请求\r\n-func (h *VideoHandler) PublishVideo(c *gin.Context) {\r\n-\ttoken := c.GetHeader(\"Authorization\")\r\n-\tif token == \"\" {\r\n-\t\tc.JSON(http.StatusUnauthorized, gin.H{\"error\": \"Missing authorization token\"})\r\n-\t\treturn\r\n-\t}\r\n-\r\n-\tvideoData, err := ioutil.ReadAll(c.Request.Body)\r\n-\tif err != nil {\r\n-\t\tc.JSON(http.StatusBadRequest, gin.H{\"error\": \"Failed to read video data\"})\r\n-\t\treturn\r\n-\t}\r\n-\r\n-\t title := c.Request.PostForm.Get(\"title\")\r\n-\t fmt.Println(title)\r\n-\tif title == \"\" {\r\n-\t\tc.JSON(http.StatusBadRequest, gin.H{\"error\": \"Video title cannot be empty\"})\r\n-\t\treturn\r\n-\t}\r\n-\r\n-\terr = h.s.PublishVideo(token, videoData, title)\r\n-\tif err != nil {\r\n-\t\tc.JSON(http.StatusInternalServerError, gin.H{\"error\": fmt.Sprintf(\"Failed to publish video: %s\", err.Error())})\r\n-\t\treturn\r\n-\t}\r\n-\r\n-\tc.JSON(http.StatusOK, gin.H{\"message\": \"Video published successfully\"})\r\n-\t\r\n-}\r\n-// VideoHandler 类中的 GetPublishedVideos 函数\r\n-func (h *VideoHandler) GetPublishedVideos(c *gin.Context) {\r\n-\t// 在这里添加验证用户权限的代码，确保只有登录用户可以访问此接口\r\n-\t// 你可以使用鉴权 token 来进行验证\r\n-\r\n-\tvideos, err := h.s.GetPublishedVideos()\r\n-\tif err != nil {\r\n-\t\tc.JSON(http.StatusInternalServerError, gin.H{\"error\": fmt.Sprintf(\"Failed to get videos: %s\", err.Error())})\r\n-\t\treturn\r\n-\t}\r\n-\r\n-\tc.JSON(http.StatusOK, videos)\r\n-}\r\n-package handler\r\n-\r\n-import (\r\n-\t\"fmt\"\r\n-\t\"io/ioutil\"\r\n-\t\"net/http\"\r\n-\r\n-\t\"github.com/Coreychen4444/Users/service\"\r\n-\t\"github.com/gin-gonic/gin\"\r\n-)\r\n-\r\n-\r\n-type VideoHandler struct {\r\n-\ts *service.VideoService\r\n-}\r\n-\r\n-func NewVideoHandler(s *service.VideoService) *VideoHandler {\r\n-\treturn &VideoHandler{s: s}\r\n-}\r\n-\r\n-// 处理视频投稿请求\r\n-func (h *VideoHandler) PublishVideo(c *gin.Context) {\r\n-\ttoken := c.GetHeader(\"Authorization\")\r\n-\tif token == \"\" {\r\n-\t\tc.JSON(http.StatusUnauthorized, gin.H{\"error\": \"Missing authorization token\"})\r\n-\t\treturn\r\n-\t}\r\n-\r\n-\tvideoData, err := ioutil.ReadAll(c.Request.Body)\r\n-\tif err != nil {\r\n-\t\tc.JSON(http.StatusBadRequest, gin.H{\"error\": \"Failed to read video data\"})\r\n-\t\treturn\r\n-\t}\r\n-\r\n-\t title := c.Post(\"title\")\r\n-\t fmt.Println(title)\r\n-\tif title == \"\" {\r\n-\t\tc.JSON(http.StatusBadRequest, gin.H{\"error\": \"Video title cannot be empty\"})\r\n-\t\treturn\r\n-\t}\r\n-\r\n-\terr = h.s.PublishVideo(token, videoData, title)\r\n-\tif err != nil {\r\n-\t\tc.JSON(http.StatusInternalServerError, gin.H{\"error\": fmt.Sprintf(\"Failed to publish video: %s\", err.Error())})\r\n-\t\treturn\r\n-\t}\r\n-\r\n-\tc.JSON(http.StatusOK, gin.H{\"message\": \"Video published successfully\"})\r\n-\t\r\n-}\r\n-// VideoHandler 类中的 GetPublishedVideos 函数\r\n-func (h *VideoHandler) GetPublishedVideos(c *gin.Context) {\r\n-\t// 在这里添加验证用户权限的代码，确保只有登录用户可以访问此接口\r\n-\t// 你可以使用鉴权 token 来进行验证\r\n-\r\n-\tvideos, err := h.s.GetPublishedVideos()\r\n-\tif err != nil {\r\n-\t\tc.JSON(http.StatusInternalServerError, gin.H{\"error\": fmt.Sprintf(\"Failed to get videos: %s\", err.Error())})\r\n-\t\treturn\r\n-\t}\r\n-\r\n-\tc.JSON(http.StatusOK, videos)\r\n-}\r\n-package handler\r\n-\r\n-import (\r\n-\t\"fmt\"\r\n-\t\"io/ioutil\"\r\n-\t\"net/http\"\r\n-\r\n-\t\"github.com/Coreychen4444/Users/service\"\r\n-\t\"github.com/gin-gonic/gin\"\r\n-)\r\n-\r\n-\r\n-type VideoHandler struct {\r\n-\ts *service.VideoService\r\n-}\r\n-\r\n-func NewVideoHandler(s *service.VideoService) *VideoHandler {\r\n-\treturn &VideoHandler{s: s}\r\n-}\r\n-\r\n-// 处理视频投稿请求\r\n-func (h *VideoHandler) PublishVideo(c *gin.Context) {\r\n-\ttoken := c.GetHeader(\"Authorization\")\r\n-\tif token == \"\" {\r\n-\t\tc.JSON(http.StatusUnauthorized, gin.H{\"error\": \"Missing authorization token\"})\r\n-\t\treturn\r\n-\t}\r\n-\r\n-\tvideoData, err := ioutil.ReadAll(c.Request.Body)\r\n-\tif err != nil {\r\n-\t\tc.JSON(http.StatusBadRequest, gin.H{\"error\": \"Failed to read video data\"})\r\n-\t\treturn\r\n-\t}\r\n-\r\n-\t title := c.PostForm(\"title\")\r\n-\t fmt.Println(title)\r\n-\tif title == \"\" {\r\n-\t\tc.JSON(http.StatusBadRequest, gin.H{\"error\": \"Video title cannot be empty\"})\r\n-\t\treturn\r\n-\t}\r\n-\r\n-\terr = h.s.PublishVideo(token, videoData, title)\r\n-\tif err != nil {\r\n-\t\tc.JSON(http.StatusInternalServerError, gin.H{\"error\": fmt.Sprintf(\"Failed to publish video: %s\", err.Error())})\r\n-\t\treturn\r\n-\t}\r\n-\r\n-\tc.JSON(http.StatusOK, gin.H{\"message\": \"Video published successfully\"})\r\n-\t\r\n-}\r\n-// VideoHandler 类中的 GetPublishedVideos 函数\r\n-func (h *VideoHandler) GetPublishedVideos(c *gin.Context) {\r\n-\t// 在这里添加验证用户权限的代码，确保只有登录用户可以访问此接口\r\n-\t// 你可以使用鉴权 token 来进行验证\r\n-\r\n-\tvideos, err := h.s.GetPublishedVideos()\r\n-\tif err != nil {\r\n-\t\tc.JSON(http.StatusInternalServerError, gin.H{\"error\": fmt.Sprintf(\"Failed to get videos: %s\", err.Error())})\r\n-\t\treturn\r\n-\t}\r\n-\r\n-\tc.JSON(http.StatusOK, videos)\r\n-}\r\n"
                },
                {
                    "date": 1691502707172,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,9 +31,9 @@\n \t\tc.JSON(http.StatusBadRequest, gin.H{\"error\": \"Failed to read video data\"})\r\n \t\treturn\r\n \t}\r\n \r\n-\t title := c.Request.GetBody(\"title\")\r\n+\t title := c.GetB(\"title\")\r\n \t fmt.Println(title)\r\n \tif title == \"\" {\r\n \t\tc.JSON(http.StatusBadRequest, gin.H{\"error\": \"Video title cannot be empty\"})\r\n \t\treturn\r\n"
                },
                {
                    "date": 1691502720715,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,63 @@\n+package handler\r\n+\r\n+import (\r\n+\t\"fmt\"\r\n+\t\"io/ioutil\"\r\n+\t\"net/http\"\r\n+\r\n+\t\"github.com/Coreychen4444/Users/service\"\r\n+\t\"github.com/gin-gonic/gin\"\r\n+)\r\n+\r\n+\r\n+type VideoHandler struct {\r\n+\ts *service.VideoService\r\n+}\r\n+\r\n+func NewVideoHandler(s *service.VideoService) *VideoHandler {\r\n+\treturn &VideoHandler{s: s}\r\n+}\r\n+\r\n+// 处理视频投稿请求\r\n+func (h *VideoHandler) PublishVideo(c *gin.Context) {\r\n+\ttoken := c.GetHeader(\"Authorization\")\r\n+\tif token == \"\" {\r\n+\t\tc.JSON(http.StatusUnauthorized, gin.H{\"error\": \"Missing authorization token\"})\r\n+\t\treturn\r\n+\t}\r\n+\r\n+\tvideoData, err := ioutil.ReadAll(c.Request.Body)\r\n+\tif err != nil {\r\n+\t\tc.JSON(http.StatusBadRequest, gin.H{\"error\": \"Failed to read video data\"})\r\n+\t\treturn\r\n+\t}\r\n+\r\n+\t title := c.GetPostForm(\"title\")\r\n+\t fmt.Println(title)\r\n+\tif title == \"\" {\r\n+\t\tc.JSON(http.StatusBadRequest, gin.H{\"error\": \"Video title cannot be empty\"})\r\n+\t\treturn\r\n+\t}\r\n+\r\n+\terr = h.s.PublishVideo(token, videoData, title)\r\n+\tif err != nil {\r\n+\t\tc.JSON(http.StatusInternalServerError, gin.H{\"error\": fmt.Sprintf(\"Failed to publish video: %s\", err.Error())})\r\n+\t\treturn\r\n+\t}\r\n+\r\n+\tc.JSON(http.StatusOK, gin.H{\"message\": \"Video published successfully\"})\r\n+\t\r\n+}\r\n+// VideoHandler 类中的 GetPublishedVideos 函数\r\n+func (h *VideoHandler) GetPublishedVideos(c *gin.Context) {\r\n+\t// 在这里添加验证用户权限的代码，确保只有登录用户可以访问此接口\r\n+\t// 你可以使用鉴权 token 来进行验证\r\n+\r\n+\tvideos, err := h.s.GetPublishedVideos()\r\n+\tif err != nil {\r\n+\t\tc.JSON(http.StatusInternalServerError, gin.H{\"error\": fmt.Sprintf(\"Failed to get videos: %s\", err.Error())})\r\n+\t\treturn\r\n+\t}\r\n+\r\n+\tc.JSON(http.StatusOK, videos)\r\n+}\r\n"
                },
                {
                    "date": 1691502747331,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,9 +31,9 @@\n \t\tc.JSON(http.StatusBadRequest, gin.H{\"error\": \"Failed to read video data\"})\r\n \t\treturn\r\n \t}\r\n \r\n-\t title := c.GetPostForm(\"title\")\r\n+\t title := c.GetPostForm(\"title\",t)\r\n \t fmt.Println(title)\r\n \tif title == \"\" {\r\n \t\tc.JSON(http.StatusBadRequest, gin.H{\"error\": \"Video title cannot be empty\"})\r\n \t\treturn\r\n@@ -60,67 +60,4 @@\n \t}\r\n \r\n \tc.JSON(http.StatusOK, videos)\r\n }\r\n-package handler\r\n-\r\n-import (\r\n-\t\"fmt\"\r\n-\t\"io/ioutil\"\r\n-\t\"net/http\"\r\n-\r\n-\t\"github.com/Coreychen4444/Users/service\"\r\n-\t\"github.com/gin-gonic/gin\"\r\n-)\r\n-\r\n-\r\n-type VideoHandler struct {\r\n-\ts *service.VideoService\r\n-}\r\n-\r\n-func NewVideoHandler(s *service.VideoService) *VideoHandler {\r\n-\treturn &VideoHandler{s: s}\r\n-}\r\n-\r\n-// 处理视频投稿请求\r\n-func (h *VideoHandler) PublishVideo(c *gin.Context) {\r\n-\ttoken := c.GetHeader(\"Authorization\")\r\n-\tif token == \"\" {\r\n-\t\tc.JSON(http.StatusUnauthorized, gin.H{\"error\": \"Missing authorization token\"})\r\n-\t\treturn\r\n-\t}\r\n-\r\n-\tvideoData, err := ioutil.ReadAll(c.Request.Body)\r\n-\tif err != nil {\r\n-\t\tc.JSON(http.StatusBadRequest, gin.H{\"error\": \"Failed to read video data\"})\r\n-\t\treturn\r\n-\t}\r\n-\r\n-\t title := c.GetB(\"title\")\r\n-\t fmt.Println(title)\r\n-\tif title == \"\" {\r\n-\t\tc.JSON(http.StatusBadRequest, gin.H{\"error\": \"Video title cannot be empty\"})\r\n-\t\treturn\r\n-\t}\r\n-\r\n-\terr = h.s.PublishVideo(token, videoData, title)\r\n-\tif err != nil {\r\n-\t\tc.JSON(http.StatusInternalServerError, gin.H{\"error\": fmt.Sprintf(\"Failed to publish video: %s\", err.Error())})\r\n-\t\treturn\r\n-\t}\r\n-\r\n-\tc.JSON(http.StatusOK, gin.H{\"message\": \"Video published successfully\"})\r\n-\t\r\n-}\r\n-// VideoHandler 类中的 GetPublishedVideos 函数\r\n-func (h *VideoHandler) GetPublishedVideos(c *gin.Context) {\r\n-\t// 在这里添加验证用户权限的代码，确保只有登录用户可以访问此接口\r\n-\t// 你可以使用鉴权 token 来进行验证\r\n-\r\n-\tvideos, err := h.s.GetPublishedVideos()\r\n-\tif err != nil {\r\n-\t\tc.JSON(http.StatusInternalServerError, gin.H{\"error\": fmt.Sprintf(\"Failed to get videos: %s\", err.Error())})\r\n-\t\treturn\r\n-\t}\r\n-\r\n-\tc.JSON(http.StatusOK, videos)\r\n-}\r\n"
                },
                {
                    "date": 1691502790808,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,9 +31,9 @@\n \t\tc.JSON(http.StatusBadRequest, gin.H{\"error\": \"Failed to read video data\"})\r\n \t\treturn\r\n \t}\r\n \r\n-\t title := c.GetPostForm(\"title\",t)\r\n+\t title := c.GetPostForm(\"title\",tt)\r\n \t fmt.Println(title)\r\n \tif title == \"\" {\r\n \t\tc.JSON(http.StatusBadRequest, gin.H{\"error\": \"Video title cannot be empty\"})\r\n \t\treturn\r\n"
                },
                {
                    "date": 1691502812749,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,9 +31,9 @@\n \t\tc.JSON(http.StatusBadRequest, gin.H{\"error\": \"Failed to read video data\"})\r\n \t\treturn\r\n \t}\r\n \r\n-\t title := c.GetPostForm(\"title\",tt)\r\n+\t title := c.GetPostForm(\"title\",)\r\n \t fmt.Println(title)\r\n \tif title == \"\" {\r\n \t\tc.JSON(http.StatusBadRequest, gin.H{\"error\": \"Video title cannot be empty\"})\r\n \t\treturn\r\n"
                },
                {
                    "date": 1691502859517,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,9 +31,9 @@\n \t\tc.JSON(http.StatusBadRequest, gin.H{\"error\": \"Failed to read video data\"})\r\n \t\treturn\r\n \t}\r\n \r\n-\t title := c.GetPostForm(\"title\",)\r\n+\t title := c.GetPostForm(\"title\")\r\n \t fmt.Println(title)\r\n \tif title == \"\" {\r\n \t\tc.JSON(http.StatusBadRequest, gin.H{\"error\": \"Video title cannot be empty\"})\r\n \t\treturn\r\n"
                },
                {
                    "date": 1691502902818,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,63 @@\n+package handler\r\n+\r\n+import (\r\n+\t\"fmt\"\r\n+\t\"io/ioutil\"\r\n+\t\"net/http\"\r\n+\r\n+\t\"github.com/Coreychen4444/Users/service\"\r\n+\t\"github.com/gin-gonic/gin\"\r\n+)\r\n+\r\n+\r\n+type VideoHandler struct {\r\n+\ts *service.VideoService\r\n+}\r\n+\r\n+func NewVideoHandler(s *service.VideoService) *VideoHandler {\r\n+\treturn &VideoHandler{s: s}\r\n+}\r\n+\r\n+// 处理视频投稿请求\r\n+func (h *VideoHandler) PublishVideo(c *gin.Context) {\r\n+\ttoken := c.GetHeader(\"Authorization\")\r\n+\tif token == \"\" {\r\n+\t\tc.JSON(http.StatusUnauthorized, gin.H{\"error\": \"Missing authorization token\"})\r\n+\t\treturn\r\n+\t}\r\n+\r\n+\tvideoData, err := ioutil.ReadAll(c.Request.Body)\r\n+\tif err != nil {\r\n+\t\tc.JSON(http.StatusBadRequest, gin.H{\"error\": \"Failed to read video data\"})\r\n+\t\treturn\r\n+\t}\r\n+\r\n+\t title,t := c.GetPostForm(\"title\")\r\n+\t fmt.Println(title)\r\n+\tif title == \"\" {\r\n+\t\tc.JSON(http.StatusBadRequest, gin.H{\"error\": \"Video title cannot be empty\"})\r\n+\t\treturn\r\n+\t}\r\n+\r\n+\terr = h.s.PublishVideo(token, videoData, title)\r\n+\tif err != nil {\r\n+\t\tc.JSON(http.StatusInternalServerError, gin.H{\"error\": fmt.Sprintf(\"Failed to publish video: %s\", err.Error())})\r\n+\t\treturn\r\n+\t}\r\n+\r\n+\tc.JSON(http.StatusOK, gin.H{\"message\": \"Video published successfully\"})\r\n+\t\r\n+}\r\n+// VideoHandler 类中的 GetPublishedVideos 函数\r\n+func (h *VideoHandler) GetPublishedVideos(c *gin.Context) {\r\n+\t// 在这里添加验证用户权限的代码，确保只有登录用户可以访问此接口\r\n+\t// 你可以使用鉴权 token 来进行验证\r\n+\r\n+\tvideos, err := h.s.GetPublishedVideos()\r\n+\tif err != nil {\r\n+\t\tc.JSON(http.StatusInternalServerError, gin.H{\"error\": fmt.Sprintf(\"Failed to get videos: %s\", err.Error())})\r\n+\t\treturn\r\n+\t}\r\n+\r\n+\tc.JSON(http.StatusOK, videos)\r\n+}\r\n"
                },
                {
                    "date": 1691502909734,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,9 +31,9 @@\n \t\tc.JSON(http.StatusBadRequest, gin.H{\"error\": \"Failed to read video data\"})\r\n \t\treturn\r\n \t}\r\n \r\n-\t title,t := c.GetPostForm(\"title\")\r\n+\t title, := c.GetPostForm(\"title\")\r\n \t fmt.Println(title)\r\n \tif title == \"\" {\r\n \t\tc.JSON(http.StatusBadRequest, gin.H{\"error\": \"Video title cannot be empty\"})\r\n \t\treturn\r\n@@ -60,67 +60,4 @@\n \t}\r\n \r\n \tc.JSON(http.StatusOK, videos)\r\n }\r\n-package handler\r\n-\r\n-import (\r\n-\t\"fmt\"\r\n-\t\"io/ioutil\"\r\n-\t\"net/http\"\r\n-\r\n-\t\"github.com/Coreychen4444/Users/service\"\r\n-\t\"github.com/gin-gonic/gin\"\r\n-)\r\n-\r\n-\r\n-type VideoHandler struct {\r\n-\ts *service.VideoService\r\n-}\r\n-\r\n-func NewVideoHandler(s *service.VideoService) *VideoHandler {\r\n-\treturn &VideoHandler{s: s}\r\n-}\r\n-\r\n-// 处理视频投稿请求\r\n-func (h *VideoHandler) PublishVideo(c *gin.Context) {\r\n-\ttoken := c.GetHeader(\"Authorization\")\r\n-\tif token == \"\" {\r\n-\t\tc.JSON(http.StatusUnauthorized, gin.H{\"error\": \"Missing authorization token\"})\r\n-\t\treturn\r\n-\t}\r\n-\r\n-\tvideoData, err := ioutil.ReadAll(c.Request.Body)\r\n-\tif err != nil {\r\n-\t\tc.JSON(http.StatusBadRequest, gin.H{\"error\": \"Failed to read video data\"})\r\n-\t\treturn\r\n-\t}\r\n-\r\n-\t title := c.GetPostForm(\"title\")\r\n-\t fmt.Println(title)\r\n-\tif title == \"\" {\r\n-\t\tc.JSON(http.StatusBadRequest, gin.H{\"error\": \"Video title cannot be empty\"})\r\n-\t\treturn\r\n-\t}\r\n-\r\n-\terr = h.s.PublishVideo(token, videoData, title)\r\n-\tif err != nil {\r\n-\t\tc.JSON(http.StatusInternalServerError, gin.H{\"error\": fmt.Sprintf(\"Failed to publish video: %s\", err.Error())})\r\n-\t\treturn\r\n-\t}\r\n-\r\n-\tc.JSON(http.StatusOK, gin.H{\"message\": \"Video published successfully\"})\r\n-\t\r\n-}\r\n-// VideoHandler 类中的 GetPublishedVideos 函数\r\n-func (h *VideoHandler) GetPublishedVideos(c *gin.Context) {\r\n-\t// 在这里添加验证用户权限的代码，确保只有登录用户可以访问此接口\r\n-\t// 你可以使用鉴权 token 来进行验证\r\n-\r\n-\tvideos, err := h.s.GetPublishedVideos()\r\n-\tif err != nil {\r\n-\t\tc.JSON(http.StatusInternalServerError, gin.H{\"error\": fmt.Sprintf(\"Failed to get videos: %s\", err.Error())})\r\n-\t\treturn\r\n-\t}\r\n-\r\n-\tc.JSON(http.StatusOK, videos)\r\n-}\r\n"
                },
                {
                    "date": 1691502915950,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,9 +31,9 @@\n \t\tc.JSON(http.StatusBadRequest, gin.H{\"error\": \"Failed to read video data\"})\r\n \t\treturn\r\n \t}\r\n \r\n-\t title, := c.GetPostForm(\"title\")\r\n+\t title,f := c.GetPostForm(\"title\")\r\n \t fmt.Println(title)\r\n \tif title == \"\" {\r\n \t\tc.JSON(http.StatusBadRequest, gin.H{\"error\": \"Video title cannot be empty\"})\r\n \t\treturn\r\n"
                },
                {
                    "date": 1691502926865,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,9 +31,9 @@\n \t\tc.JSON(http.StatusBadRequest, gin.H{\"error\": \"Failed to read video data\"})\r\n \t\treturn\r\n \t}\r\n \r\n-\t title,f := c.GetPostForm(\"title\")\r\n+\t title,_ := c.GetPostForm(\"title\")\r\n \t fmt.Println(title)\r\n \tif title == \"\" {\r\n \t\tc.JSON(http.StatusBadRequest, gin.H{\"error\": \"Video title cannot be empty\"})\r\n \t\treturn\r\n"
                },
                {
                    "date": 1691503026850,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,63 @@\n+package handler\r\n+\r\n+import (\r\n+\t\"fmt\"\r\n+\t\"io/ioutil\"\r\n+\t\"net/http\"\r\n+\r\n+\t\"github.com/Coreychen4444/Users/service\"\r\n+\t\"github.com/gin-gonic/gin\"\r\n+)\r\n+\r\n+\r\n+type VideoHandler struct {\r\n+\ts *service.VideoService\r\n+}\r\n+\r\n+func NewVideoHandler(s *service.VideoService) *VideoHandler {\r\n+\treturn &VideoHandler{s: s}\r\n+}\r\n+\r\n+// 处理视频投稿请求\r\n+func (h *VideoHandler) PublishVideo(c *gin.Context) {\r\n+\ttoken := c.GetHeader(\"Authorization\")\r\n+\tif token == \"\" {\r\n+\t\tc.JSON(http.StatusUnauthorized, gin.H{\"error\": \"Missing authorization token\"})\r\n+\t\treturn\r\n+\t}\r\n+\r\n+\tvideoData, err := ioutil.ReadAll(c.Request.Body)\r\n+\tif err != nil {\r\n+\t\tc.JSON(http.StatusBadRequest, gin.H{\"error\": \"Failed to read video data\"})\r\n+\t\treturn\r\n+\t}\r\n+\r\n+\t title,_ := c.Get(\"title\")\r\n+\t fmt.Println(title)\r\n+\tif title == \"\" {\r\n+\t\tc.JSON(http.StatusBadRequest, gin.H{\"error\": \"Video title cannot be empty\"})\r\n+\t\treturn\r\n+\t}\r\n+\r\n+\terr = h.s.PublishVideo(token, videoData, title)\r\n+\tif err != nil {\r\n+\t\tc.JSON(http.StatusInternalServerError, gin.H{\"error\": fmt.Sprintf(\"Failed to publish video: %s\", err.Error())})\r\n+\t\treturn\r\n+\t}\r\n+\r\n+\tc.JSON(http.StatusOK, gin.H{\"message\": \"Video published successfully\"})\r\n+\t\r\n+}\r\n+// VideoHandler 类中的 GetPublishedVideos 函数\r\n+func (h *VideoHandler) GetPublishedVideos(c *gin.Context) {\r\n+\t// 在这里添加验证用户权限的代码，确保只有登录用户可以访问此接口\r\n+\t// 你可以使用鉴权 token 来进行验证\r\n+\r\n+\tvideos, err := h.s.GetPublishedVideos()\r\n+\tif err != nil {\r\n+\t\tc.JSON(http.StatusInternalServerError, gin.H{\"error\": fmt.Sprintf(\"Failed to get videos: %s\", err.Error())})\r\n+\t\treturn\r\n+\t}\r\n+\r\n+\tc.JSON(http.StatusOK, videos)\r\n+}\r\n"
                },
                {
                    "date": 1691503034321,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,9 +31,9 @@\n \t\tc.JSON(http.StatusBadRequest, gin.H{\"error\": \"Failed to read video data\"})\r\n \t\treturn\r\n \t}\r\n \r\n-\t title,_ := c.Get(\"title\")\r\n+\t title,_ := c.GetHeader(\"title\")\r\n \t fmt.Println(title)\r\n \tif title == \"\" {\r\n \t\tc.JSON(http.StatusBadRequest, gin.H{\"error\": \"Video title cannot be empty\"})\r\n \t\treturn\r\n@@ -60,67 +60,4 @@\n \t}\r\n \r\n \tc.JSON(http.StatusOK, videos)\r\n }\r\n-package handler\r\n-\r\n-import (\r\n-\t\"fmt\"\r\n-\t\"io/ioutil\"\r\n-\t\"net/http\"\r\n-\r\n-\t\"github.com/Coreychen4444/Users/service\"\r\n-\t\"github.com/gin-gonic/gin\"\r\n-)\r\n-\r\n-\r\n-type VideoHandler struct {\r\n-\ts *service.VideoService\r\n-}\r\n-\r\n-func NewVideoHandler(s *service.VideoService) *VideoHandler {\r\n-\treturn &VideoHandler{s: s}\r\n-}\r\n-\r\n-// 处理视频投稿请求\r\n-func (h *VideoHandler) PublishVideo(c *gin.Context) {\r\n-\ttoken := c.GetHeader(\"Authorization\")\r\n-\tif token == \"\" {\r\n-\t\tc.JSON(http.StatusUnauthorized, gin.H{\"error\": \"Missing authorization token\"})\r\n-\t\treturn\r\n-\t}\r\n-\r\n-\tvideoData, err := ioutil.ReadAll(c.Request.Body)\r\n-\tif err != nil {\r\n-\t\tc.JSON(http.StatusBadRequest, gin.H{\"error\": \"Failed to read video data\"})\r\n-\t\treturn\r\n-\t}\r\n-\r\n-\t title,_ := c.GetPostForm(\"title\")\r\n-\t fmt.Println(title)\r\n-\tif title == \"\" {\r\n-\t\tc.JSON(http.StatusBadRequest, gin.H{\"error\": \"Video title cannot be empty\"})\r\n-\t\treturn\r\n-\t}\r\n-\r\n-\terr = h.s.PublishVideo(token, videoData, title)\r\n-\tif err != nil {\r\n-\t\tc.JSON(http.StatusInternalServerError, gin.H{\"error\": fmt.Sprintf(\"Failed to publish video: %s\", err.Error())})\r\n-\t\treturn\r\n-\t}\r\n-\r\n-\tc.JSON(http.StatusOK, gin.H{\"message\": \"Video published successfully\"})\r\n-\t\r\n-}\r\n-// VideoHandler 类中的 GetPublishedVideos 函数\r\n-func (h *VideoHandler) GetPublishedVideos(c *gin.Context) {\r\n-\t// 在这里添加验证用户权限的代码，确保只有登录用户可以访问此接口\r\n-\t// 你可以使用鉴权 token 来进行验证\r\n-\r\n-\tvideos, err := h.s.GetPublishedVideos()\r\n-\tif err != nil {\r\n-\t\tc.JSON(http.StatusInternalServerError, gin.H{\"error\": fmt.Sprintf(\"Failed to get videos: %s\", err.Error())})\r\n-\t\treturn\r\n-\t}\r\n-\r\n-\tc.JSON(http.StatusOK, videos)\r\n-}\r\n"
                },
                {
                    "date": 1691503192357,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,13 +31,13 @@\n \t\tc.JSON(http.StatusBadRequest, gin.H{\"error\": \"Failed to read video data\"})\r\n \t\treturn\r\n \t}\r\n \r\n-\t title,_ := c.GetHeader(\"title\")\r\n-\t fmt.Println(title)\r\n-\tif title == \"\" {\r\n-\t\tc.JSON(http.StatusBadRequest, gin.H{\"error\": \"Video title cannot be empty\"})\r\n-\t\treturn\r\n+\t title := c.GetHeader(\"title\")\r\n+\t//  fmt.Println(title)\r\n+\t// if title == \"\" {\r\n+\t// \tc.JSON(http.StatusBadRequest, gin.H{\"error\": \"Video title cannot be empty\"})\r\n+\t// \treturn\r\n \t}\r\n \r\n \terr = h.s.PublishVideo(token, videoData, title)\r\n \tif err != nil {\r\n"
                },
                {
                    "date": 1691503203440,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,12 +32,12 @@\n \t\treturn\r\n \t}\r\n \r\n \t title := c.GetHeader(\"title\")\r\n-\t//  fmt.Println(title)\r\n-\t// if title == \"\" {\r\n-\t// \tc.JSON(http.StatusBadRequest, gin.H{\"error\": \"Video title cannot be empty\"})\r\n-\t// \treturn\r\n+\t fmt.Println(title)\r\n+\tif title == \"\" {\r\n+\t\tc.JSON(http.StatusBadRequest, gin.H{\"error\": \"Video title cannot be empty\"})\r\n+\t\treturn\r\n \t}\r\n \r\n \terr = h.s.PublishVideo(token, videoData, title)\r\n \tif err != nil {\r\n"
                },
                {
                    "date": 1691503208986,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,64 @@\n+package handler\r\n+\r\n+import (\r\n+\t\"fmt\"\r\n+\t\"io/ioutil\"\r\n+\t\"net/http\"\r\n+\r\n+\t\"github.com/Coreychen4444/Users/service\"\r\n+\t\"github.com/gin-gonic/gin\"\r\n+)\r\n+\r\n+\r\n+type VideoHandler struct {\r\n+\ts *service.VideoService\r\n+}\r\n+\r\n+func NewVideoHandler(s *service.VideoService) *VideoHandler {\r\n+\treturn &VideoHandler{s: s}\r\n+}\r\n+\r\n+// 处理视频投稿请求\r\n+func (h *VideoHandler) PublishVideo(c *gin.Context) {\r\n+\ttoken := c.GetHeader(\"Authorization\")\r\n+\tif token == \"\" {\r\n+\t\tc.JSON(http.StatusUnauthorized, gin.H{\"error\": \"Missing authorization token\"})\r\n+\t\treturn\r\n+\t}\r\n+\r\n+\tvideoData, err := ioutil.ReadAll(c.Request.Body)\r\n+\tif err != nil {\r\n+\t\tc.JSON(http.StatusBadRequest, gin.H{\"error\": \"Failed to read video data\"})\r\n+\t\treturn\r\n+\t}\r\n+\r\n+\t title := c.GetHeader(\"title\")\r\n+\t title\r\n+\t//  fmt.Println(title)\r\n+\t// if title == \"\" {\r\n+\t// \tc.JSON(http.StatusBadRequest, gin.H{\"error\": \"Video title cannot be empty\"})\r\n+\t// \treturn\r\n+\t// }\r\n+\r\n+\terr = h.s.PublishVideo(token, videoData, title)\r\n+\tif err != nil {\r\n+\t\tc.JSON(http.StatusInternalServerError, gin.H{\"error\": fmt.Sprintf(\"Failed to publish video: %s\", err.Error())})\r\n+\t\treturn\r\n+\t}\r\n+\r\n+\tc.JSON(http.StatusOK, gin.H{\"message\": \"Video published successfully\"})\r\n+\t\r\n+}\r\n+// VideoHandler 类中的 GetPublishedVideos 函数\r\n+func (h *VideoHandler) GetPublishedVideos(c *gin.Context) {\r\n+\t// 在这里添加验证用户权限的代码，确保只有登录用户可以访问此接口\r\n+\t// 你可以使用鉴权 token 来进行验证\r\n+\r\n+\tvideos, err := h.s.GetPublishedVideos()\r\n+\tif err != nil {\r\n+\t\tc.JSON(http.StatusInternalServerError, gin.H{\"error\": fmt.Sprintf(\"Failed to get videos: %s\", err.Error())})\r\n+\t\treturn\r\n+\t}\r\n+\r\n+\tc.JSON(http.StatusOK, videos)\r\n+}\r\n"
                },
                {
                    "date": 1691503216985,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,64 @@\n+package handler\r\n+\r\n+import (\r\n+\t\"fmt\"\r\n+\t\"io/ioutil\"\r\n+\t\"net/http\"\r\n+\r\n+\t\"github.com/Coreychen4444/Users/service\"\r\n+\t\"github.com/gin-gonic/gin\"\r\n+)\r\n+\r\n+\r\n+type VideoHandler struct {\r\n+\ts *service.VideoService\r\n+}\r\n+\r\n+func NewVideoHandler(s *service.VideoService) *VideoHandler {\r\n+\treturn &VideoHandler{s: s}\r\n+}\r\n+\r\n+// 处理视频投稿请求\r\n+func (h *VideoHandler) PublishVideo(c *gin.Context) {\r\n+\ttoken := c.GetHeader(\"Authorization\")\r\n+\tif token == \"\" {\r\n+\t\tc.JSON(http.StatusUnauthorized, gin.H{\"error\": \"Missing authorization token\"})\r\n+\t\treturn\r\n+\t}\r\n+\r\n+\tvideoData, err := ioutil.ReadAll(c.Request.Body)\r\n+\tif err != nil {\r\n+\t\tc.JSON(http.StatusBadRequest, gin.H{\"error\": \"Failed to read video data\"})\r\n+\t\treturn\r\n+\t}\r\n+\r\n+\t title := c.GetHeader(\"title\")\r\n+\t title=\"test1\"\r\n+\t//  fmt.Println(title)\r\n+\t// if title == \"\" {\r\n+\t// \tc.JSON(http.StatusBadRequest, gin.H{\"error\": \"Video title cannot be empty\"})\r\n+\t// \treturn\r\n+\t// }\r\n+\r\n+\terr = h.s.PublishVideo(token, videoData, title)\r\n+\tif err != nil {\r\n+\t\tc.JSON(http.StatusInternalServerError, gin.H{\"error\": fmt.Sprintf(\"Failed to publish video: %s\", err.Error())})\r\n+\t\treturn\r\n+\t}\r\n+\r\n+\tc.JSON(http.StatusOK, gin.H{\"message\": \"Video published successfully\"})\r\n+\t\r\n+}\r\n+// VideoHandler 类中的 GetPublishedVideos 函数\r\n+func (h *VideoHandler) GetPublishedVideos(c *gin.Context) {\r\n+\t// 在这里添加验证用户权限的代码，确保只有登录用户可以访问此接口\r\n+\t// 你可以使用鉴权 token 来进行验证\r\n+\r\n+\tvideos, err := h.s.GetPublishedVideos()\r\n+\tif err != nil {\r\n+\t\tc.JSON(http.StatusInternalServerError, gin.H{\"error\": fmt.Sprintf(\"Failed to get videos: %s\", err.Error())})\r\n+\t\treturn\r\n+\t}\r\n+\r\n+\tc.JSON(http.StatusOK, videos)\r\n+}\r\n"
                },
                {
                    "date": 1691503418601,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,80 +31,14 @@\n \t\tc.JSON(http.StatusBadRequest, gin.H{\"error\": \"Failed to read video data\"})\r\n \t\treturn\r\n \t}\r\n \r\n-\t title := c.GetHeader(\"title\")\r\n-\t title=\"test1\"\r\n-\t//  fmt.Println(title)\r\n-\t// if title == \"\" {\r\n-\t// \tc.JSON(http.StatusBadRequest, gin.H{\"error\": \"Video title cannot be empty\"})\r\n-\t// \treturn\r\n-\t// }\r\n-\r\n-\terr = h.s.PublishVideo(token, videoData, title)\r\n-\tif err != nil {\r\n-\t\tc.JSON(http.StatusInternalServerError, gin.H{\"error\": fmt.Sprintf(\"Failed to publish video: %s\", err.Error())})\r\n+\t title := c.PostForm(\"title\")\r\n+\tif title == \"\" {\r\n+\t\tc.JSON(http.StatusBadRequest, gin.H{\"error\": \"Video title cannot be empty\"})\r\n \t\treturn\r\n \t}\r\n \r\n-\tc.JSON(http.StatusOK, gin.H{\"message\": \"Video published successfully\"})\r\n-\t\r\n-}\r\n-// VideoHandler 类中的 GetPublishedVideos 函数\r\n-func (h *VideoHandler) GetPublishedVideos(c *gin.Context) {\r\n-\t// 在这里添加验证用户权限的代码，确保只有登录用户可以访问此接口\r\n-\t// 你可以使用鉴权 token 来进行验证\r\n-\r\n-\tvideos, err := h.s.GetPublishedVideos()\r\n-\tif err != nil {\r\n-\t\tc.JSON(http.StatusInternalServerError, gin.H{\"error\": fmt.Sprintf(\"Failed to get videos: %s\", err.Error())})\r\n-\t\treturn\r\n-\t}\r\n-\r\n-\tc.JSON(http.StatusOK, videos)\r\n-}\r\n-package handler\r\n-\r\n-import (\r\n-\t\"fmt\"\r\n-\t\"io/ioutil\"\r\n-\t\"net/http\"\r\n-\r\n-\t\"github.com/Coreychen4444/Users/service\"\r\n-\t\"github.com/gin-gonic/gin\"\r\n-)\r\n-\r\n-\r\n-type VideoHandler struct {\r\n-\ts *service.VideoService\r\n-}\r\n-\r\n-func NewVideoHandler(s *service.VideoService) *VideoHandler {\r\n-\treturn &VideoHandler{s: s}\r\n-}\r\n-\r\n-// 处理视频投稿请求\r\n-func (h *VideoHandler) PublishVideo(c *gin.Context) {\r\n-\ttoken := c.GetHeader(\"Authorization\")\r\n-\tif token == \"\" {\r\n-\t\tc.JSON(http.StatusUnauthorized, gin.H{\"error\": \"Missing authorization token\"})\r\n-\t\treturn\r\n-\t}\r\n-\r\n-\tvideoData, err := ioutil.ReadAll(c.Request.Body)\r\n-\tif err != nil {\r\n-\t\tc.JSON(http.StatusBadRequest, gin.H{\"error\": \"Failed to read video data\"})\r\n-\t\treturn\r\n-\t}\r\n-\r\n-\t title := c.GetHeader(\"title\")\r\n-\t title\r\n-\t//  fmt.Println(title)\r\n-\t// if title == \"\" {\r\n-\t// \tc.JSON(http.StatusBadRequest, gin.H{\"error\": \"Video title cannot be empty\"})\r\n-\t// \treturn\r\n-\t// }\r\n-\r\n \terr = h.s.PublishVideo(token, videoData, title)\r\n \tif err != nil {\r\n \t\tc.JSON(http.StatusInternalServerError, gin.H{\"error\": fmt.Sprintf(\"Failed to publish video: %s\", err.Error())})\r\n \t\treturn\r\n@@ -125,67 +59,19 @@\n \t}\r\n \r\n \tc.JSON(http.StatusOK, videos)\r\n }\r\n-package handler\r\n+func (h *VideoHandler) ReceiveTitle(c *gin.Context) {\r\n+\t// 从 POST 表单中获取标题\r\n+\ttitle := c.PostForm(\"title\")\r\n \r\n-import (\r\n-\t\"fmt\"\r\n-\t\"io/ioutil\"\r\n-\t\"net/http\"\r\n-\r\n-\t\"github.com/Coreychen4444/Users/service\"\r\n-\t\"github.com/gin-gonic/gin\"\r\n-)\r\n-\r\n-\r\n-type VideoHandler struct {\r\n-\ts *service.VideoService\r\n-}\r\n-\r\n-func NewVideoHandler(s *service.VideoService) *VideoHandler {\r\n-\treturn &VideoHandler{s: s}\r\n-}\r\n-\r\n-// 处理视频投稿请求\r\n-func (h *VideoHandler) PublishVideo(c *gin.Context) {\r\n-\ttoken := c.GetHeader(\"Authorization\")\r\n-\tif token == \"\" {\r\n-\t\tc.JSON(http.StatusUnauthorized, gin.H{\"error\": \"Missing authorization token\"})\r\n-\t\treturn\r\n-\t}\r\n-\r\n-\tvideoData, err := ioutil.ReadAll(c.Request.Body)\r\n-\tif err != nil {\r\n-\t\tc.JSON(http.StatusBadRequest, gin.H{\"error\": \"Failed to read video data\"})\r\n-\t\treturn\r\n-\t}\r\n-\r\n-\t title := c.GetHeader(\"title\")\r\n-\t fmt.Println(title)\r\n+\t// 检查标题是否为空\r\n \tif title == \"\" {\r\n \t\tc.JSON(http.StatusBadRequest, gin.H{\"error\": \"Video title cannot be empty\"})\r\n \t\treturn\r\n \t}\r\n \r\n-\terr = h.s.PublishVideo(token, videoData, title)\r\n-\tif err != nil {\r\n-\t\tc.JSON(http.StatusInternalServerError, gin.H{\"error\": fmt.Sprintf(\"Failed to publish video: %s\", err.Error())})\r\n-\t\treturn\r\n-\t}\r\n+\t// 在这里处理接收到的标题，你可以根据需要进行进一步的操作\r\n \r\n-\tc.JSON(http.StatusOK, gin.H{\"message\": \"Video published successfully\"})\r\n-\t\r\n-}\r\n-// VideoHandler 类中的 GetPublishedVideos 函数\r\n-func (h *VideoHandler) GetPublishedVideos(c *gin.Context) {\r\n-\t// 在这里添加验证用户权限的代码，确保只有登录用户可以访问此接口\r\n-\t// 你可以使用鉴权 token 来进行验证\r\n-\r\n-\tvideos, err := h.s.GetPublishedVideos()\r\n-\tif err != nil {\r\n-\t\tc.JSON(http.StatusInternalServerError, gin.H{\"error\": fmt.Sprintf(\"Failed to get videos: %s\", err.Error())})\r\n-\t\treturn\r\n-\t}\r\n-\r\n-\tc.JSON(http.StatusOK, videos)\r\n-}\r\n+\t// 返回成功响应\r\n+\tc.JSON(http.StatusOK, gin.H{\"message\": \"Title received successfully\"})\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1691503425360,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,8 +32,9 @@\n \t\treturn\r\n \t}\r\n \r\n \t title := c.PostForm(\"title\")\r\n+\t title=\"test\"\r\n \tif title == \"\" {\r\n \t\tc.JSON(http.StatusBadRequest, gin.H{\"error\": \"Video title cannot be empty\"})\r\n \t\treturn\r\n \t}\r\n@@ -46,32 +47,20 @@\n \r\n \tc.JSON(http.StatusOK, gin.H{\"message\": \"Video published successfully\"})\r\n \t\r\n }\r\n-// VideoHandler 类中的 GetPublishedVideos 函数\r\n-func (h *VideoHandler) GetPublishedVideos(c *gin.Context) {\r\n-\t// 在这里添加验证用户权限的代码，确保只有登录用户可以访问此接口\r\n-\t// 你可以使用鉴权 token 来进行验证\r\n+// 处理获取投稿视频请求\r\n+func (h *VideoHandler) GetVideo(c *gin.Context) {\r\n+\tvideoID := c.Param(\"video_id\") // 获取 URL 参数中的 video_id\r\n+\tif videoID == \"\" {\r\n+\t\tc.JSON(http.StatusBadRequest, gin.H{\"error\": \"Video ID cannot be empty\"})\r\n+\t\treturn\r\n+\t}\r\n \r\n-\tvideos, err := h.s.GetPublishedVideos()\r\n+\tvideo, err := h.s.GetVideoByID(videoID)\r\n \tif err != nil {\r\n-\t\tc.JSON(http.StatusInternalServerError, gin.H{\"error\": fmt.Sprintf(\"Failed to get videos: %s\", err.Error())})\r\n+\t\tc.JSON(http.StatusNotFound, gin.H{\"error\": fmt.Sprintf(\"Video not found: %s\", err.Error())})\r\n \t\treturn\r\n \t}\r\n \r\n-\tc.JSON(http.StatusOK, videos)\r\n+\tc.JSON(http.StatusOK, video)\r\n }\r\n-func (h *VideoHandler) ReceiveTitle(c *gin.Context) {\r\n-\t// 从 POST 表单中获取标题\r\n-\ttitle := c.PostForm(\"title\")\r\n-\r\n-\t// 检查标题是否为空\r\n\\ No newline at end of file\n-\tif title == \"\" {\r\n-\t\tc.JSON(http.StatusBadRequest, gin.H{\"error\": \"Video title cannot be empty\"})\r\n-\t\treturn\r\n-\t}\r\n-\r\n-\t// 在这里处理接收到的标题，你可以根据需要进行进一步的操作\r\n-\r\n-\t// 返回成功响应\r\n-\tc.JSON(http.StatusOK, gin.H{\"message\": \"Title received successfully\"})\r\n-}\n"
                },
                {
                    "date": 1691503430691,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -47,20 +47,17 @@\n \r\n \tc.JSON(http.StatusOK, gin.H{\"message\": \"Video published successfully\"})\r\n \t\r\n }\r\n-// 处理获取投稿视频请求\r\n-func (h *VideoHandler) GetVideo(c *gin.Context) {\r\n-\tvideoID := c.Param(\"video_id\") // 获取 URL 参数中的 video_id\r\n-\tif videoID == \"\" {\r\n-\t\tc.JSON(http.StatusBadRequest, gin.H{\"error\": \"Video ID cannot be empty\"})\r\n-\t\treturn\r\n-\t}\r\n+// VideoHandler 类中的 GetPublishedVideos 函数\r\n+func (h *VideoHandler) GetPublishedVideos(c *gin.Context) {\r\n+\t// 在这里添加验证用户权限的代码，确保只有登录用户可以访问此接口\r\n+\t// 你可以使用鉴权 token 来进行验证\r\n \r\n-\tvideo, err := h.s.GetVideoByID(videoID)\r\n+\tvideos, err := h.s.GetPublishedVideos()\r\n \tif err != nil {\r\n-\t\tc.JSON(http.StatusNotFound, gin.H{\"error\": fmt.Sprintf(\"Video not found: %s\", err.Error())})\r\n+\t\tc.JSON(http.StatusInternalServerError, gin.H{\"error\": fmt.Sprintf(\"Failed to get videos: %s\", err.Error())})\r\n \t\treturn\r\n \t}\r\n \r\n-\tc.JSON(http.StatusOK, video)\r\n-}\r\n+\tc.JSON(http.StatusOK, videos)\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1691503992902,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -47,9 +47,8 @@\n \r\n \tc.JSON(http.StatusOK, gin.H{\"message\": \"Video published successfully\"})\r\n \t\r\n }\r\n-// VideoHandler 类中的 GetPublishedVideos 函数\r\n func (h *VideoHandler) GetPublishedVideos(c *gin.Context) {\r\n \t// 在这里添加验证用户权限的代码，确保只有登录用户可以访问此接口\r\n \t// 你可以使用鉴权 token 来进行验证\r\n \r\n"
                },
                {
                    "date": 1691504017949,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,9 +8,8 @@\n \t\"github.com/Coreychen4444/Users/service\"\r\n \t\"github.com/gin-gonic/gin\"\r\n )\r\n \r\n-\r\n type VideoHandler struct {\r\n \ts *service.VideoService\r\n }\r\n \r\n@@ -19,43 +18,47 @@\n }\r\n \r\n // 处理视频投稿请求\r\n func (h *VideoHandler) PublishVideo(c *gin.Context) {\r\n+\t// 从请求头中获取鉴权 token\r\n \ttoken := c.GetHeader(\"Authorization\")\r\n \tif token == \"\" {\r\n-\t\tc.JSON(http.StatusUnauthorized, gin.H{\"error\": \"Missing authorization token\"})\r\n+\t\tc.JSON(http.StatusUnauthorized, gin.H{\"error\": \"缺少鉴权 token\"})\r\n \t\treturn\r\n \t}\r\n \r\n+\t// 读取视频数据\r\n \tvideoData, err := ioutil.ReadAll(c.Request.Body)\r\n \tif err != nil {\r\n-\t\tc.JSON(http.StatusBadRequest, gin.H{\"error\": \"Failed to read video data\"})\r\n+\t\tc.JSON(http.StatusBadRequest, gin.H{\"error\": \"读取视频数据失败\"})\r\n \t\treturn\r\n \t}\r\n \r\n-\t title := c.PostForm(\"title\")\r\n-\t title=\"test\"\r\n+\t// 获取视频标题并进行非空校验\r\n+\ttitle := c.PostForm(\"title\")\r\n \tif title == \"\" {\r\n-\t\tc.JSON(http.StatusBadRequest, gin.H{\"error\": \"Video title cannot be empty\"})\r\n+\t\tc.JSON(http.StatusBadRequest, gin.H{\"error\": \"视频标题不能为空\"})\r\n \t\treturn\r\n \t}\r\n \r\n+\t// 调用 service 层的方法进行视频投稿\r\n \terr = h.s.PublishVideo(token, videoData, title)\r\n \tif err != nil {\r\n-\t\tc.JSON(http.StatusInternalServerError, gin.H{\"error\": fmt.Sprintf(\"Failed to publish video: %s\", err.Error())})\r\n+\t\tc.JSON(http.StatusInternalServerError, gin.H{\"error\": fmt.Sprintf(\"视频投稿失败：%s\", err.Error())})\r\n \t\treturn\r\n \t}\r\n \r\n-\tc.JSON(http.StatusOK, gin.H{\"message\": \"Video published successfully\"})\r\n-\t\r\n+\tc.JSON(http.StatusOK, gin.H{\"message\": \"视频投稿成功\"})\r\n }\r\n+\r\n func (h *VideoHandler) GetPublishedVideos(c *gin.Context) {\r\n \t// 在这里添加验证用户权限的代码，确保只有登录用户可以访问此接口\r\n \t// 你可以使用鉴权 token 来进行验证\r\n \r\n+\t// 调用 service 层的方法获取已发布的视频列表\r\n \tvideos, err := h.s.GetPublishedVideos()\r\n \tif err != nil {\r\n-\t\tc.JSON(http.StatusInternalServerError, gin.H{\"error\": fmt.Sprintf(\"Failed to get videos: %s\", err.Error())})\r\n+\t\tc.JSON(http.StatusInternalServerError, gin.H{\"error\": fmt.Sprintf(\"获取视频列表失败：%s\", err.Error())})\r\n \t\treturn\r\n \t}\r\n \r\n \tc.JSON(http.StatusOK, videos)\r\n"
                },
                {
                    "date": 1691504034774,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,8 +34,9 @@\n \t}\r\n \r\n \t// 获取视频标题并进行非空校验\r\n \ttitle := c.PostForm(\"title\")\r\n+\ttitle=\"title\"\r\n \tif title == \"\" {\r\n \t\tc.JSON(http.StatusBadRequest, gin.H{\"error\": \"视频标题不能为空\"})\r\n \t\treturn\r\n \t}\r\n"
                }
            ],
            "date": 1691485669879,
            "name": "Commit-0",
            "content": "handler/viedeohandler.go"
        }
    ]
}