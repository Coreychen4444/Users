{
    "sourceFile": "service/videoservice.go",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 37,
            "patches": [
                {
                    "date": 1691485552926,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1691486162862,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,9 @@\n \t\"fmt\"\r\n \t\"io/ioutil\"\r\n \t\"time\"\r\n \r\n-\t\"github.com/Coreychen4444/Douyin/core\"\r\n+\t\"github.com/Coreychen4444/Users/core\"\r\n \t\"github.com/Coreychen4444/Douyin/model\"\r\n \t\"github.com/Coreychen4444/Douyin/repository\"\r\n )\r\n \r\n"
                },
                {
                    "date": 1691486169887,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,10 +6,10 @@\n \t\"io/ioutil\"\r\n \t\"time\"\r\n \r\n \t\"github.com/Coreychen4444/Users/core\"\r\n-\t\"github.com/Coreychen4444/Douyin/model\"\r\n-\t\"github.com/Coreychen4444/Douyin/repository\"\r\n+\t\"github.com/Coreychen4444/Users/model\"\r\n+\t\"github.com/Coreychen4444/Users/repository\"\r\n )\r\n \r\n type VideoService struct {\r\n \trepo *repository.DbRepository\r\n"
                },
                {
                    "date": 1691486302994,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,8 @@\n \t\"fmt\"\r\n \t\"io/ioutil\"\r\n \t\"time\"\r\n \r\n-\t\"github.com/Coreychen4444/Users/core\"\r\n \t\"github.com/Coreychen4444/Users/model\"\r\n \t\"github.com/Coreychen4444/Users/repository\"\r\n )\r\n \r\n"
                },
                {
                    "date": 1691486481982,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,64 @@\n+package service\r\n+\r\n+import (\r\n+\t\"errors\"\r\n+\t\"fmt\"\r\n+\t\"github.com/Coreychen4444/Douyin/model\"\r\n+\t\"github.com/Coreychen4444/Douyin/repository\"\r\n+\t\"io/ioutil\"\r\n+\t\"time\"\r\n+)\r\n+\r\n+type VideoService struct {\r\n+\tr *repository.DbRepository\r\n+}\r\n+\r\n+func NewVideoService(r *repository.DbRepository) *VideoService {\r\n+\treturn &VideoService{r: r}\r\n+}\r\n+\r\n+// 视频投稿\r\n+func (s *VideoService) PublishVideo(token string, videoData []byte, title string) error {\r\n+\tuserID, err := VerifyToken(token)\r\n+\tif err != nil {\r\n+\t\treturn fmt.Errorf(\"验证token时出错: %w\", err)\r\n+\t}\r\n+\r\n+\tuser, err := s.r.GetUserById(userID)\r\n+\tif err != nil {\r\n+\t\treturn fmt.Errorf(\"获取用户信息时出错: %w\", err)\r\n+\t}\r\n+\r\n+\tif user == nil {\r\n+\t\treturn errors.New(\"用户不存在\")\r\n+\t}\r\n+\r\n+\t// 处理视频数据，保存到本地或对象存储，这里假设保存在本地\r\n+\tvideoPath := fmt.Sprintf(\"videos/%d_%s.mp4\", userID, time.Now().Format(\"20060102150405\"))\r\n+\tif err := s.saveVideoData(videoData, videoPath); err != nil {\r\n+\t\treturn fmt.Errorf(\"保存视频文件时出错: %w\", err)\r\n+\t}\r\n+\r\n+\t// 创建视频记录\r\n+\tvideo := &model.Video{\r\n+\t\tAuthorID:      userID,\r\n+\t\tTitle:         title,\r\n+\t\tVideoFilePath: videoPath,\r\n+\t\tCreateTime:    time.Now(),\r\n+\t}\r\n+\r\n+\tif _, err := s.r.CreateVideo(video); err != nil {\r\n+\t\treturn fmt.Errorf(\"创建视频记录时出错: %w\", err)\r\n+\t}\r\n+\r\n+\treturn nil\r\n+}\r\n+\r\n+// 保存视频数据\r\n+func (s *VideoService) saveVideoData(data []byte, filePath string) error {\r\n+\terr := ioutil.WriteFile(filePath, data, 0644)\r\n+\tif err != nil {\r\n+\t\treturn err\r\n+\t}\r\n+\treturn nil\r\n+}\r\n"
                },
                {
                    "date": 1691486495393,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,75 +2,11 @@\n \r\n import (\r\n \t\"errors\"\r\n \t\"fmt\"\r\n-\t\"github.com/Coreychen4444/Douyin/model\"\r\n-\t\"github.com/Coreychen4444/Douyin/repository\"\r\n \t\"io/ioutil\"\r\n \t\"time\"\r\n-)\r\n \r\n-type VideoService struct {\r\n-\tr *repository.DbRepository\r\n-}\r\n-\r\n-func NewVideoService(r *repository.DbRepository) *VideoService {\r\n-\treturn &VideoService{r: r}\r\n-}\r\n-\r\n-// 视频投稿\r\n-func (s *VideoService) PublishVideo(token string, videoData []byte, title string) error {\r\n-\tuserID, err := VerifyToken(token)\r\n-\tif err != nil {\r\n-\t\treturn fmt.Errorf(\"验证token时出错: %w\", err)\r\n-\t}\r\n-\r\n-\tuser, err := s.r.GetUserById(userID)\r\n-\tif err != nil {\r\n-\t\treturn fmt.Errorf(\"获取用户信息时出错: %w\", err)\r\n-\t}\r\n-\r\n-\tif user == nil {\r\n-\t\treturn errors.New(\"用户不存在\")\r\n-\t}\r\n-\r\n-\t// 处理视频数据，保存到本地或对象存储，这里假设保存在本地\r\n-\tvideoPath := fmt.Sprintf(\"videos/%d_%s.mp4\", userID, time.Now().Format(\"20060102150405\"))\r\n-\tif err := s.saveVideoData(videoData, videoPath); err != nil {\r\n-\t\treturn fmt.Errorf(\"保存视频文件时出错: %w\", err)\r\n-\t}\r\n-\r\n-\t// 创建视频记录\r\n-\tvideo := &model.Video{\r\n-\t\tAuthorID:      userID,\r\n-\t\tTitle:         title,\r\n-\t\tVideoFilePath: videoPath,\r\n-\t\tCreateTime:    time.Now(),\r\n-\t}\r\n-\r\n-\tif _, err := s.r.CreateVideo(video); err != nil {\r\n-\t\treturn fmt.Errorf(\"创建视频记录时出错: %w\", err)\r\n-\t}\r\n-\r\n-\treturn nil\r\n-}\r\n-\r\n-// 保存视频数据\r\n-func (s *VideoService) saveVideoData(data []byte, filePath string) error {\r\n-\terr := ioutil.WriteFile(filePath, data, 0644)\r\n-\tif err != nil {\r\n-\t\treturn err\r\n-\t}\r\n-\treturn nil\r\n-}\r\n-package service\r\n-\r\n-import (\r\n-\t\"errors\"\r\n-\t\"fmt\"\r\n-\t\"io/ioutil\"\r\n-\t\"time\"\r\n-\r\n \t\"github.com/Coreychen4444/Users/model\"\r\n \t\"github.com/Coreychen4444/Users/repository\"\r\n )\r\n \r\n"
                },
                {
                    "date": 1691486510656,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,44 +2,41 @@\n \r\n import (\r\n \t\"errors\"\r\n \t\"fmt\"\r\n+\t\"github.com/Coreychen4444/Douyin/model\"\r\n+\t\"github.com/Coreychen4444/Douyin/repository\"\r\n \t\"io/ioutil\"\r\n \t\"time\"\r\n-\r\n-\t\"github.com/Coreychen4444/Users/model\"\r\n-\t\"github.com/Coreychen4444/Users/repository\"\r\n )\r\n \r\n type VideoService struct {\r\n-\trepo *repository.DbRepository\r\n+\tr *repository.DbRepository\r\n }\r\n \r\n-func NewVideoService(repo *repository.DbRepository) *VideoService {\r\n-\treturn &VideoService{repo: repo}\r\n+func NewVideoService(r *repository.DbRepository) *VideoService {\r\n+\treturn &VideoService{r: r}\r\n }\r\n \r\n-// PublishVideo 实现视频投稿功能\r\n+// 视频投稿\r\n func (s *VideoService) PublishVideo(token string, videoData []byte, title string) error {\r\n-\t// 验证用户 token\r\n \tuserID, err := VerifyToken(token)\r\n \tif err != nil {\r\n \t\treturn fmt.Errorf(\"验证token时出错: %w\", err)\r\n \t}\r\n \r\n-\t// 获取用户信息\r\n-\tuser, err := s.repo.GetUserById(userID)\r\n+\tuser, err := s.r.GetUserById(userID)\r\n \tif err != nil {\r\n \t\treturn fmt.Errorf(\"获取用户信息时出错: %w\", err)\r\n \t}\r\n \r\n \tif user == nil {\r\n \t\treturn errors.New(\"用户不存在\")\r\n \t}\r\n \r\n-\t// 将视频数据保存到本地或对象存储\r\n+\t// 处理视频数据，保存到本地或对象存储，这里假设保存在本地\r\n \tvideoPath := fmt.Sprintf(\"videos/%d_%s.mp4\", userID, time.Now().Format(\"20060102150405\"))\r\n-\tif err := ioutil.WriteFile(videoPath, videoData, 0644); err != nil {\r\n+\tif err := s.saveVideoData(videoData, videoPath); err != nil {\r\n \t\treturn fmt.Errorf(\"保存视频文件时出错: %w\", err)\r\n \t}\r\n \r\n \t// 创建视频记录\r\n@@ -49,10 +46,19 @@\n \t\tVideoFilePath: videoPath,\r\n \t\tCreateTime:    time.Now(),\r\n \t}\r\n \r\n-\tif _, err := s.repo.CreateVideo(video); err != nil {\r\n+\tif _, err := s.r.CreateVideo(video); err != nil {\r\n \t\treturn fmt.Errorf(\"创建视频记录时出错: %w\", err)\r\n \t}\r\n \r\n \treturn nil\r\n }\r\n+\r\n+// 保存视频数据\r\n+func (s *VideoService) saveVideoData(data []byte, filePath string) error {\r\n+\terr := ioutil.WriteFile(filePath, data, 0644)\r\n+\tif err != nil {\r\n+\t\treturn err\r\n+\t}\r\n+\treturn nil\r\n+}\r\n"
                },
                {
                    "date": 1691486518314,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,58 @@\n+package service\r\n+\r\n+import (\r\n+\t\"errors\"\r\n+\t\"fmt\"\r\n+\t\"io/ioutil\"\r\n+\t\"time\"\r\n+\r\n+\t\"github.com/Coreychen4444/Users/model\"\r\n+\t\"github.com/Coreychen4444/Users/repository\"\r\n+)\r\n+\r\n+type VideoService struct {\r\n+\trepo *repository.DbRepository\r\n+}\r\n+\r\n+func NewVideoService(repo *repository.DbRepository) *VideoService {\r\n+\treturn &VideoService{repo: repo}\r\n+}\r\n+\r\n+// PublishVideo 实现视频投稿功能\r\n+func (s *VideoService) PublishVideo(token string, videoData []byte, title string) error {\r\n+\t// 验证用户 token\r\n+\tuserID, err := VerifyToken(token)\r\n+\tif err != nil {\r\n+\t\treturn fmt.Errorf(\"验证token时出错: %w\", err)\r\n+\t}\r\n+\r\n+\t// 获取用户信息\r\n+\tuser, err := s.repo.GetUserById(userID)\r\n+\tif err != nil {\r\n+\t\treturn fmt.Errorf(\"获取用户信息时出错: %w\", err)\r\n+\t}\r\n+\r\n+\tif user == nil {\r\n+\t\treturn errors.New(\"用户不存在\")\r\n+\t}\r\n+\r\n+\t// 将视频数据保存到本地或对象存储\r\n+\tvideoPath := fmt.Sprintf(\"videos/%d_%s.mp4\", userID, time.Now().Format(\"20060102150405\"))\r\n+\tif err := ioutil.WriteFile(videoPath, videoData, 0644); err != nil {\r\n+\t\treturn fmt.Errorf(\"保存视频文件时出错: %w\", err)\r\n+\t}\r\n+\r\n+\t// 创建视频记录\r\n+\tvideo := &model.Video{\r\n+\t\tAuthorID:      userID,\r\n+\t\tTitle:         title,\r\n+\t\tVideoFilePath: videoPath,\r\n+\t\tCreateTime:    time.Now(),\r\n+\t}\r\n+\r\n+\tif _, err := s.repo.CreateVideo(video); err != nil {\r\n+\t\treturn fmt.Errorf(\"创建视频记录时出错: %w\", err)\r\n+\t}\r\n+\r\n+\treturn nil\r\n+}\r\n"
                },
                {
                    "date": 1691486524854,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,66 +2,8 @@\n \r\n import (\r\n \t\"errors\"\r\n \t\"fmt\"\r\n-\t\"io/ioutil\"\r\n-\t\"time\"\r\n-\r\n-\t\"github.com/Coreychen4444/Users/model\"\r\n-\t\"github.com/Coreychen4444/Users/repository\"\r\n-)\r\n-\r\n-type VideoService struct {\r\n-\trepo *repository.DbRepository\r\n-}\r\n-\r\n-func NewVideoService(repo *repository.DbRepository) *VideoService {\r\n-\treturn &VideoService{repo: repo}\r\n-}\r\n-\r\n-// PublishVideo 实现视频投稿功能\r\n-func (s *VideoService) PublishVideo(token string, videoData []byte, title string) error {\r\n-\t// 验证用户 token\r\n-\tuserID, err := VerifyToken(token)\r\n-\tif err != nil {\r\n-\t\treturn fmt.Errorf(\"验证token时出错: %w\", err)\r\n-\t}\r\n-\r\n-\t// 获取用户信息\r\n-\tuser, err := s.repo.GetUserById(userID)\r\n-\tif err != nil {\r\n-\t\treturn fmt.Errorf(\"获取用户信息时出错: %w\", err)\r\n-\t}\r\n-\r\n-\tif user == nil {\r\n-\t\treturn errors.New(\"用户不存在\")\r\n-\t}\r\n-\r\n-\t// 将视频数据保存到本地或对象存储\r\n-\tvideoPath := fmt.Sprintf(\"videos/%d_%s.mp4\", userID, time.Now().Format(\"20060102150405\"))\r\n-\tif err := ioutil.WriteFile(videoPath, videoData, 0644); err != nil {\r\n-\t\treturn fmt.Errorf(\"保存视频文件时出错: %w\", err)\r\n-\t}\r\n-\r\n-\t// 创建视频记录\r\n-\tvideo := &model.Video{\r\n-\t\tAuthorID:      userID,\r\n-\t\tTitle:         title,\r\n-\t\tVideoFilePath: videoPath,\r\n-\t\tCreateTime:    time.Now(),\r\n-\t}\r\n-\r\n-\tif _, err := s.repo.CreateVideo(video); err != nil {\r\n-\t\treturn fmt.Errorf(\"创建视频记录时出错: %w\", err)\r\n-\t}\r\n-\r\n-\treturn nil\r\n-}\r\n-package service\r\n-\r\n-import (\r\n-\t\"errors\"\r\n-\t\"fmt\"\r\n \t\"github.com/Coreychen4444/Douyin/model\"\r\n \t\"github.com/Coreychen4444/Douyin/repository\"\r\n \t\"io/ioutil\"\r\n \t\"time\"\r\n"
                },
                {
                    "date": 1691486530514,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,64 @@\n+package service\r\n+\r\n+import (\r\n+\t\"errors\"\r\n+\t\"fmt\"\r\n+\t\"github.com/Coreychen4444/Douyin/model\"\r\n+\t\"github.com/Coreychen4444/Douyin/repository\"\r\n+\t\"io/ioutil\"\r\n+\t\"time\"\r\n+)\r\n+\r\n+type VideoService struct {\r\n+\trepo *repository.DbRepository\r\n+}\r\n+\r\n+func NewVideoService(r *repository.DbRepository) *VideoService {\r\n+\treturn &VideoService{r: r}\r\n+}\r\n+\r\n+// 视频投稿\r\n+func (s *VideoService) PublishVideo(token string, videoData []byte, title string) error {\r\n+\tuserID, err := VerifyToken(token)\r\n+\tif err != nil {\r\n+\t\treturn fmt.Errorf(\"验证token时出错: %w\", err)\r\n+\t}\r\n+\r\n+\tuser, err := s.r.GetUserById(userID)\r\n+\tif err != nil {\r\n+\t\treturn fmt.Errorf(\"获取用户信息时出错: %w\", err)\r\n+\t}\r\n+\r\n+\tif user == nil {\r\n+\t\treturn errors.New(\"用户不存在\")\r\n+\t}\r\n+\r\n+\t// 处理视频数据，保存到本地或对象存储，这里假设保存在本地\r\n+\tvideoPath := fmt.Sprintf(\"videos/%d_%s.mp4\", userID, time.Now().Format(\"20060102150405\"))\r\n+\tif err := s.saveVideoData(videoData, videoPath); err != nil {\r\n+\t\treturn fmt.Errorf(\"保存视频文件时出错: %w\", err)\r\n+\t}\r\n+\r\n+\t// 创建视频记录\r\n+\tvideo := &model.Video{\r\n+\t\tAuthorID:      userID,\r\n+\t\tTitle:         title,\r\n+\t\tVideoFilePath: videoPath,\r\n+\t\tCreateTime:    time.Now(),\r\n+\t}\r\n+\r\n+\tif _, err := s.r.CreateVideo(video); err != nil {\r\n+\t\treturn fmt.Errorf(\"创建视频记录时出错: %w\", err)\r\n+\t}\r\n+\r\n+\treturn nil\r\n+}\r\n+\r\n+// 保存视频数据\r\n+func (s *VideoService) saveVideoData(data []byte, filePath string) error {\r\n+\terr := ioutil.WriteFile(filePath, data, 0644)\r\n+\tif err != nil {\r\n+\t\treturn err\r\n+\t}\r\n+\treturn nil\r\n+}\r\n"
                },
                {
                    "date": 1691486535902,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,64 @@\n+package service\r\n+\r\n+import (\r\n+\t\"errors\"\r\n+\t\"fmt\"\r\n+\t\"github.com/Coreychen4444/Douyin/model\"\r\n+\t\"github.com/Coreychen4444/Douyin/repository\"\r\n+\t\"io/ioutil\"\r\n+\t\"time\"\r\n+)\r\n+\r\n+type VideoService struct {\r\n+\tr *repository.DbRepository\r\n+}\r\n+\r\n+func NewVideoService(r *repository.DbRepository) *VideoService {\r\n+\treturn &VideoService{r: r}\r\n+}\r\n+\r\n+// 视频投稿\r\n+func (s *VideoService) PublishVideo(token string, videoData []byte, title string) error {\r\n+\tuserID, err := VerifyToken(token)\r\n+\tif err != nil {\r\n+\t\treturn fmt.Errorf(\"验证token时出错: %w\", err)\r\n+\t}\r\n+\r\n+\tuser, err := s.r.GetUserById(userID)\r\n+\tif err != nil {\r\n+\t\treturn fmt.Errorf(\"获取用户信息时出错: %w\", err)\r\n+\t}\r\n+\r\n+\tif user == nil {\r\n+\t\treturn errors.New(\"用户不存在\")\r\n+\t}\r\n+\r\n+\t// 处理视频数据，保存到本地或对象存储，这里假设保存在本地\r\n+\tvideoPath := fmt.Sprintf(\"videos/%d_%s.mp4\", userID, time.Now().Format(\"20060102150405\"))\r\n+\tif err := s.saveVideoData(videoData, videoPath); err != nil {\r\n+\t\treturn fmt.Errorf(\"保存视频文件时出错: %w\", err)\r\n+\t}\r\n+\r\n+\t// 创建视频记录\r\n+\tvideo := &model.Video{\r\n+\t\tAuthorID:      userID,\r\n+\t\tTitle:         title,\r\n+\t\tVideoFilePath: videoPath,\r\n+\t\tCreateTime:    time.Now(),\r\n+\t}\r\n+\r\n+\tif _, err := s.r.CreateVideo(video); err != nil {\r\n+\t\treturn fmt.Errorf(\"创建视频记录时出错: %w\", err)\r\n+\t}\r\n+\r\n+\treturn nil\r\n+}\r\n+\r\n+// 保存视频数据\r\n+func (s *VideoService) saveVideoData(data []byte, filePath string) error {\r\n+\terr := ioutil.WriteFile(filePath, data, 0644)\r\n+\tif err != nil {\r\n+\t\treturn err\r\n+\t}\r\n+\treturn nil\r\n+}\r\n"
                },
                {
                    "date": 1691486561664,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,77 +9,13 @@\n \t\"time\"\r\n )\r\n \r\n type VideoService struct {\r\n-\tr *repository.DbRepository\r\n-}\r\n-\r\n-func NewVideoService(r *repository.DbRepository) *VideoService {\r\n-\treturn &VideoService{r: r}\r\n-}\r\n-\r\n-// 视频投稿\r\n-func (s *VideoService) PublishVideo(token string, videoData []byte, title string) error {\r\n-\tuserID, err := VerifyToken(token)\r\n-\tif err != nil {\r\n-\t\treturn fmt.Errorf(\"验证token时出错: %w\", err)\r\n-\t}\r\n-\r\n-\tuser, err := s.r.GetUserById(userID)\r\n-\tif err != nil {\r\n-\t\treturn fmt.Errorf(\"获取用户信息时出错: %w\", err)\r\n-\t}\r\n-\r\n-\tif user == nil {\r\n-\t\treturn errors.New(\"用户不存在\")\r\n-\t}\r\n-\r\n-\t// 处理视频数据，保存到本地或对象存储，这里假设保存在本地\r\n-\tvideoPath := fmt.Sprintf(\"videos/%d_%s.mp4\", userID, time.Now().Format(\"20060102150405\"))\r\n-\tif err := s.saveVideoData(videoData, videoPath); err != nil {\r\n-\t\treturn fmt.Errorf(\"保存视频文件时出错: %w\", err)\r\n-\t}\r\n-\r\n-\t// 创建视频记录\r\n-\tvideo := &model.Video{\r\n-\t\tAuthorID:      userID,\r\n-\t\tTitle:         title,\r\n-\t\tVideoFilePath: videoPath,\r\n-\t\tCreateTime:    time.Now(),\r\n-\t}\r\n-\r\n-\tif _, err := s.r.CreateVideo(video); err != nil {\r\n-\t\treturn fmt.Errorf(\"创建视频记录时出错: %w\", err)\r\n-\t}\r\n-\r\n-\treturn nil\r\n-}\r\n-\r\n-// 保存视频数据\r\n-func (s *VideoService) saveVideoData(data []byte, filePath string) error {\r\n-\terr := ioutil.WriteFile(filePath, data, 0644)\r\n-\tif err != nil {\r\n-\t\treturn err\r\n-\t}\r\n-\treturn nil\r\n-}\r\n-package service\r\n-\r\n-import (\r\n-\t\"errors\"\r\n-\t\"fmt\"\r\n-\t\"github.com/Coreychen4444/Douyin/model\"\r\n-\t\"github.com/Coreychen4444/Douyin/repository\"\r\n-\t\"io/ioutil\"\r\n-\t\"time\"\r\n-)\r\n-\r\n-type VideoService struct {\r\n \trepo *repository.DbRepository\r\n }\r\n \r\n-func NewVideoService(r *repository.DbRepository) *VideoService {\r\n-\treturn &VideoService{r: r}\r\n+func NewVideoService(repo *repository.DbRepository) *VideoService {\r\n+\treturn &VideoService{repo: repo}\r\n }\r\n \r\n // 视频投稿\r\n func (s *VideoService) PublishVideo(token string, videoData []byte, title string) error {\r\n@@ -87,9 +23,9 @@\n \tif err != nil {\r\n \t\treturn fmt.Errorf(\"验证token时出错: %w\", err)\r\n \t}\r\n \r\n-\tuser, err := s.r.GetUserById(userID)\r\n+\tuser, err := s.repo.GetUserById(userID)\r\n \tif err != nil {\r\n \t\treturn fmt.Errorf(\"获取用户信息时出错: %w\", err)\r\n \t}\r\n \r\n@@ -110,9 +46,9 @@\n \t\tVideoFilePath: videoPath,\r\n \t\tCreateTime:    time.Now(),\r\n \t}\r\n \r\n-\tif _, err := s.r.CreateVideo(video); err != nil {\r\n+\tif _, err := s.repo.CreateVideo(video); err != nil {\r\n \t\treturn fmt.Errorf(\"创建视频记录时出错: %w\", err)\r\n \t}\r\n \r\n \treturn nil\r\n@@ -125,68 +61,4 @@\n \t\treturn err\r\n \t}\r\n \treturn nil\r\n }\r\n-package service\r\n-\r\n-import (\r\n-\t\"errors\"\r\n-\t\"fmt\"\r\n-\t\"github.com/Coreychen4444/Douyin/model\"\r\n-\t\"github.com/Coreychen4444/Douyin/repository\"\r\n-\t\"io/ioutil\"\r\n-\t\"time\"\r\n-)\r\n-\r\n-type VideoService struct {\r\n-\tr *repository.DbRepository\r\n-}\r\n-\r\n-func NewVideoService(r *repository.DbRepository) *VideoService {\r\n-\treturn &VideoService{r: r}\r\n-}\r\n-\r\n-// 视频投稿\r\n-func (s *VideoService) PublishVideo(token string, videoData []byte, title string) error {\r\n-\tuserID, err := VerifyToken(token)\r\n-\tif err != nil {\r\n-\t\treturn fmt.Errorf(\"验证token时出错: %w\", err)\r\n-\t}\r\n-\r\n-\tuser, err := s.r.GetUserById(userID)\r\n-\tif err != nil {\r\n-\t\treturn fmt.Errorf(\"获取用户信息时出错: %w\", err)\r\n-\t}\r\n-\r\n-\tif user == nil {\r\n-\t\treturn errors.New(\"用户不存在\")\r\n-\t}\r\n-\r\n-\t// 处理视频数据，保存到本地或对象存储，这里假设保存在本地\r\n-\tvideoPath := fmt.Sprintf(\"videos/%d_%s.mp4\", userID, time.Now().Format(\"20060102150405\"))\r\n-\tif err := s.saveVideoData(videoData, videoPath); err != nil {\r\n-\t\treturn fmt.Errorf(\"保存视频文件时出错: %w\", err)\r\n-\t}\r\n-\r\n-\t// 创建视频记录\r\n-\tvideo := &model.Video{\r\n-\t\tAuthorID:      userID,\r\n-\t\tTitle:         title,\r\n-\t\tVideoFilePath: videoPath,\r\n-\t\tCreateTime:    time.Now(),\r\n-\t}\r\n-\r\n-\tif _, err := s.r.CreateVideo(video); err != nil {\r\n-\t\treturn fmt.Errorf(\"创建视频记录时出错: %w\", err)\r\n-\t}\r\n-\r\n-\treturn nil\r\n-}\r\n-\r\n-// 保存视频数据\r\n-func (s *VideoService) saveVideoData(data []byte, filePath string) error {\r\n-\terr := ioutil.WriteFile(filePath, data, 0644)\r\n-\tif err != nil {\r\n-\t\treturn err\r\n-\t}\r\n-\treturn nil\r\n-}\r\n"
                },
                {
                    "date": 1691486607073,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,9 @@\n \r\n import (\r\n \t\"errors\"\r\n \t\"fmt\"\r\n-\t\"github.com/Coreychen4444/Douyin/model\"\r\n+\t\"github.com/Coreychen4444/Users/model\"\r\n \t\"github.com/Coreychen4444/Douyin/repository\"\r\n \t\"io/ioutil\"\r\n \t\"time\"\r\n )\r\n"
                },
                {
                    "date": 1691486613409,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,9 @@\n import (\r\n \t\"errors\"\r\n \t\"fmt\"\r\n \t\"github.com/Coreychen4444/Users/model\"\r\n-\t\"github.com/Coreychen4444/Douyin/repository\"\r\n+\t\"github.com/Coreychen4444/Users/repository\"\r\n \t\"io/ioutil\"\r\n \t\"time\"\r\n )\r\n \r\n"
                },
                {
                    "date": 1691486621888,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,12 +2,13 @@\n \r\n import (\r\n \t\"errors\"\r\n \t\"fmt\"\r\n+\t\"io/ioutil\"\r\n+\t\"time\"\r\n+\r\n \t\"github.com/Coreychen4444/Users/model\"\r\n \t\"github.com/Coreychen4444/Users/repository\"\r\n-\t\"io/ioutil\"\r\n-\t\"time\"\r\n )\r\n \r\n type VideoService struct {\r\n \trepo *repository.DbRepository\r\n@@ -16,15 +17,17 @@\n func NewVideoService(repo *repository.DbRepository) *VideoService {\r\n \treturn &VideoService{repo: repo}\r\n }\r\n \r\n-// 视频投稿\r\n+// PublishVideo 实现视频投稿功能\r\n func (s *VideoService) PublishVideo(token string, videoData []byte, title string) error {\r\n+\t// 验证用户 token\r\n \tuserID, err := VerifyToken(token)\r\n \tif err != nil {\r\n \t\treturn fmt.Errorf(\"验证token时出错: %w\", err)\r\n \t}\r\n \r\n+\t// 获取用户信息\r\n \tuser, err := s.repo.GetUserById(userID)\r\n \tif err != nil {\r\n \t\treturn fmt.Errorf(\"获取用户信息时出错: %w\", err)\r\n \t}\r\n@@ -32,11 +35,11 @@\n \tif user == nil {\r\n \t\treturn errors.New(\"用户不存在\")\r\n \t}\r\n \r\n-\t// 处理视频数据，保存到本地或对象存储，这里假设保存在本地\r\n+\t// 将视频数据保存到本地或对象存储\r\n \tvideoPath := fmt.Sprintf(\"videos/%d_%s.mp4\", userID, time.Now().Format(\"20060102150405\"))\r\n-\tif err := s.saveVideoData(videoData, videoPath); err != nil {\r\n+\tif err := ioutil.WriteFile(videoPath, videoData, 0644); err != nil {\r\n \t\treturn fmt.Errorf(\"保存视频文件时出错: %w\", err)\r\n \t}\r\n \r\n \t// 创建视频记录\r\n@@ -52,13 +55,4 @@\n \t}\r\n \r\n \treturn nil\r\n }\r\n-\r\n-// 保存视频数据\r\n-func (s *VideoService) saveVideoData(data []byte, filePath string) error {\r\n-\terr := ioutil.WriteFile(filePath, data, 0644)\r\n-\tif err != nil {\r\n-\t\treturn err\r\n-\t}\r\n-\treturn nil\r\n-}\r\n"
                },
                {
                    "date": 1691486824969,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,44 +2,44 @@\n \r\n import (\r\n \t\"errors\"\r\n \t\"fmt\"\r\n+\t\"github.com/Coreychen4444/Douyin/model\"\r\n+\t\"github.com/Coreychen4444/Douyin/repository\"\r\n+\t\"github.com/dgrijalva/jwt-go\"\r\n \t\"io/ioutil\"\r\n \t\"time\"\r\n-\r\n-\t\"github.com/Coreychen4444/Users/model\"\r\n-\t\"github.com/Coreychen4444/Users/repository\"\r\n )\r\n \r\n type VideoService struct {\r\n-\trepo *repository.DbRepository\r\n+\tr *repository.DbRepository\r\n }\r\n \r\n-func NewVideoService(repo *repository.DbRepository) *VideoService {\r\n-\treturn &VideoService{repo: repo}\r\n+func NewVideoService(r *repository.DbRepository) *VideoService {\r\n+\treturn &VideoService{r: r}\r\n }\r\n \r\n-// PublishVideo 实现视频投稿功能\r\n+// 视频投稿\r\n func (s *VideoService) PublishVideo(token string, videoData []byte, title string) error {\r\n-\t// 验证用户 token\r\n-\tuserID, err := VerifyToken(token)\r\n+\tclaims, err := VerifyToken(token)\r\n \tif err != nil {\r\n \t\treturn fmt.Errorf(\"验证token时出错: %w\", err)\r\n \t}\r\n \r\n-\t// 获取用户信息\r\n-\tuser, err := s.repo.GetUserById(userID)\r\n+\tuserID := claims.UserID\r\n+\r\n+\tuser, err := s.r.GetUserById(userID)\r\n \tif err != nil {\r\n \t\treturn fmt.Errorf(\"获取用户信息时出错: %w\", err)\r\n \t}\r\n \r\n \tif user == nil {\r\n \t\treturn errors.New(\"用户不存在\")\r\n \t}\r\n \r\n-\t// 将视频数据保存到本地或对象存储\r\n+\t// 处理视频数据，保存到本地或对象存储，这里假设保存在本地\r\n \tvideoPath := fmt.Sprintf(\"videos/%d_%s.mp4\", userID, time.Now().Format(\"20060102150405\"))\r\n-\tif err := ioutil.WriteFile(videoPath, videoData, 0644); err != nil {\r\n+\tif err := s.saveVideoData(videoData, videoPath); err != nil {\r\n \t\treturn fmt.Errorf(\"保存视频文件时出错: %w\", err)\r\n \t}\r\n \r\n \t// 创建视频记录\r\n@@ -49,10 +49,19 @@\n \t\tVideoFilePath: videoPath,\r\n \t\tCreateTime:    time.Now(),\r\n \t}\r\n \r\n-\tif _, err := s.repo.CreateVideo(video); err != nil {\r\n+\tif err := s.r.CreateVideo(video); err != nil {\r\n \t\treturn fmt.Errorf(\"创建视频记录时出错: %w\", err)\r\n \t}\r\n \r\n \treturn nil\r\n }\r\n+\r\n+// 保存视频数据\r\n+func (s *VideoService) saveVideoData(data []byte, filePath string) error {\r\n+\terr := ioutil.WriteFile(filePath, data, 0644)\r\n+\tif err != nil {\r\n+\t\treturn err\r\n+\t}\r\n+\treturn nil\r\n+}\r\n"
                },
                {
                    "date": 1691486832627,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,9 @@\n \r\n import (\r\n \t\"errors\"\r\n \t\"fmt\"\r\n-\t\"github.com/Coreychen4444/Douyin/model\"\r\n+\t\"github.com/Coreychen4444/Users/model\"\r\n \t\"github.com/Coreychen4444/Douyin/repository\"\r\n \t\"github.com/dgrijalva/jwt-go\"\r\n \t\"io/ioutil\"\r\n \t\"time\"\r\n"
                },
                {
                    "date": 1691487070048,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,10 +3,10 @@\n import (\r\n \t\"errors\"\r\n \t\"fmt\"\r\n \t\"github.com/Coreychen4444/Users/model\"\r\n-\t\"github.com/Coreychen4444/Douyin/repository\"\r\n-\t\"github.com/dgrijalva/jwt-go\"\r\n+\t\"github.com/Coreychen4444/Users/repository\"\r\n+\t// \"github.com/dgrijalva/jwt-go\"\r\n \t\"io/ioutil\"\r\n \t\"time\"\r\n )\r\n \r\n"
                },
                {
                    "date": 1691496579075,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -44,9 +44,9 @@\n \r\n \t// 创建视频记录\r\n \tvideo := &model.Video{\r\n \t\tAuthorID:      userID,\r\n-\t\tTitle:         title,\r\n+\t\t// Title:         title,\r\n \t\tVideoFilePath: videoPath,\r\n \t\tCreateTime:    time.Now(),\r\n \t}\r\n \r\n"
                },
                {
                    "date": 1691496627856,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,67 @@\n+package service\r\n+\r\n+import (\r\n+\t\"errors\"\r\n+\t\"fmt\"\r\n+\t\"github.com/Coreychen4444/Users/model\"\r\n+\t\"github.com/Coreychen4444/Users/repository\"\r\n+\t// \"github.com/dgrijalva/jwt-go\"\r\n+\t\"io/ioutil\"\r\n+\t\"time\"\r\n+)\r\n+\r\n+type VideoService struct {\r\n+\tr *repository.DbRepository\r\n+}\r\n+\r\n+func NewVideoService(r *repository.DbRepository) *VideoService {\r\n+\treturn &VideoService{r: r}\r\n+}\r\n+\r\n+// 视频投稿\r\n+func (s *VideoService) PublishVideo(token string, videoData []byte, title string) error {\r\n+\tclaims, err := VerifyToken(token)\r\n+\tif err != nil {\r\n+\t\treturn fmt.Errorf(\"验证token时出错: %w\", err)\r\n+\t}\r\n+\r\n+\tuserID := claims.UserID\r\n+\r\n+\tuser, err := s.r.GetUserById(userID)\r\n+\tif err != nil {\r\n+\t\treturn fmt.Errorf(\"获取用户信息时出错: %w\", err)\r\n+\t}\r\n+\r\n+\tif user == nil {\r\n+\t\treturn errors.New(\"用户不存在\")\r\n+\t}\r\n+\r\n+\t// 处理视频数据，保存到本地或对象存储，这里假设保存在本地\r\n+\tvideoPath := fmt.Sprintf(\"videos/%d_%s.mp4\", userID, time.Now().Format(\"20060102150405\"))\r\n+\tif err := s.saveVideoData(videoData, videoPath); err != nil {\r\n+\t\treturn fmt.Errorf(\"保存视频文件时出错: %w\", err)\r\n+\t}\r\n+\r\n+\t// 创建视频记录\r\n+\tvideo := &model.Video{\r\n+\t\tAuthorID:      userID,\r\n+\t\tTitle:         title,\r\n+\t\tVideoFilePath: videoPath,\r\n+\t\tCreateTime:    time.Now(),\r\n+\t}\r\n+\r\n+\tif err := s.r.CreateVideo(video); err != nil {\r\n+\t\treturn fmt.Errorf(\"创建视频记录时出错: %w\", err)\r\n+\t}\r\n+\r\n+\treturn nil\r\n+}\r\n+\r\n+// 保存视频数据\r\n+func (s *VideoService) saveVideoData(data []byte, filePath string) error {\r\n+\terr := ioutil.WriteFile(filePath, data, 0644)\r\n+\tif err != nil {\r\n+\t\treturn err\r\n+\t}\r\n+\treturn nil\r\n+}\r\n"
                },
                {
                    "date": 1691497263858,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -44,9 +44,9 @@\n \r\n \t// 创建视频记录\r\n \tvideo := &model.Video{\r\n \t\tAuthorID:      userID,\r\n-\t\tTitle:         title,\r\n+\t\tTitle:         ,\r\n \t\tVideoFilePath: videoPath,\r\n \t\tCreateTime:    time.Now(),\r\n \t}\r\n \r\n@@ -64,71 +64,4 @@\n \t\treturn err\r\n \t}\r\n \treturn nil\r\n }\r\n-package service\r\n-\r\n-import (\r\n-\t\"errors\"\r\n-\t\"fmt\"\r\n-\t\"github.com/Coreychen4444/Users/model\"\r\n-\t\"github.com/Coreychen4444/Users/repository\"\r\n-\t// \"github.com/dgrijalva/jwt-go\"\r\n-\t\"io/ioutil\"\r\n-\t\"time\"\r\n-)\r\n-\r\n-type VideoService struct {\r\n-\tr *repository.DbRepository\r\n-}\r\n-\r\n-func NewVideoService(r *repository.DbRepository) *VideoService {\r\n-\treturn &VideoService{r: r}\r\n-}\r\n-\r\n-// 视频投稿\r\n-func (s *VideoService) PublishVideo(token string, videoData []byte, title string) error {\r\n-\tclaims, err := VerifyToken(token)\r\n-\tif err != nil {\r\n-\t\treturn fmt.Errorf(\"验证token时出错: %w\", err)\r\n-\t}\r\n-\r\n-\tuserID := claims.UserID\r\n-\r\n-\tuser, err := s.r.GetUserById(userID)\r\n-\tif err != nil {\r\n-\t\treturn fmt.Errorf(\"获取用户信息时出错: %w\", err)\r\n-\t}\r\n-\r\n-\tif user == nil {\r\n-\t\treturn errors.New(\"用户不存在\")\r\n-\t}\r\n-\r\n-\t// 处理视频数据，保存到本地或对象存储，这里假设保存在本地\r\n-\tvideoPath := fmt.Sprintf(\"videos/%d_%s.mp4\", userID, time.Now().Format(\"20060102150405\"))\r\n-\tif err := s.saveVideoData(videoData, videoPath); err != nil {\r\n-\t\treturn fmt.Errorf(\"保存视频文件时出错: %w\", err)\r\n-\t}\r\n-\r\n-\t// 创建视频记录\r\n-\tvideo := &model.Video{\r\n-\t\tAuthorID:      userID,\r\n-\t\t// Title:         title,\r\n-\t\tVideoFilePath: videoPath,\r\n-\t\tCreateTime:    time.Now(),\r\n-\t}\r\n-\r\n-\tif err := s.r.CreateVideo(video); err != nil {\r\n-\t\treturn fmt.Errorf(\"创建视频记录时出错: %w\", err)\r\n-\t}\r\n-\r\n-\treturn nil\r\n-}\r\n-\r\n-// 保存视频数据\r\n-func (s *VideoService) saveVideoData(data []byte, filePath string) error {\r\n-\terr := ioutil.WriteFile(filePath, data, 0644)\r\n-\tif err != nil {\r\n-\t\treturn err\r\n-\t}\r\n-\treturn nil\r\n-}\r\n"
                },
                {
                    "date": 1691497704888,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -44,9 +44,9 @@\n \r\n \t// 创建视频记录\r\n \tvideo := &model.Video{\r\n \t\tAuthorID:      userID,\r\n-\t\tTitle:         ,\r\n+\t\tTitle:         title,\r\n \t\tVideoFilePath: videoPath,\r\n \t\tCreateTime:    time.Now(),\r\n \t}\r\n \r\n"
                },
                {
                    "date": 1691499557905,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -64,4 +64,12 @@\n \t\treturn err\r\n \t}\r\n \treturn nil\r\n }\r\n+// VideoService 类中的 GetPublishedVideos 函数\r\n+func (s *VideoService) GetPublishedVideos() ([]*model.Video, error) {\r\n+\tvideos, err := s.r.GetPublishedVideos()\r\n+\tif err != nil {\r\n+\t\treturn nil, fmt.Errorf(\"Failed to get videos from repository: %w\", err)\r\n+\t}\r\n+\treturn videos, nil\r\n+}\r\n"
                },
                {
                    "date": 1691501647913,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,76 @@\n+package service\r\n+\r\n+import (\r\n+\t\"errors\"\r\n+\t\"fmt\"\r\n+\t\"github.com/Coreychen4444/Users/model\"\r\n+\t\"github.com/Coreychen4444/Users/repository\"\r\n+\t// \"github.com/dgrijalva/jwt-go\"\r\n+\t\"io/ioutil\"\r\n+\t\"time\"\r\n+)\r\n+\r\n+type VideoService struct {\r\n+\tr *repository.DbRepository\r\n+}\r\n+\r\n+func NewVideoService(r *repository.DbRepository) *VideoService {\r\n+\treturn &VideoService{r: r}\r\n+}\r\n+\r\n+// 视频投稿\r\n+func (s *VideoService) PublishVideo(token string, videoData []byte, title string) error {\r\n+\tclaims, err := VerifyToken(token)\r\n+\tif err != nil {\r\n+\t\treturn fmt.Errorf(\"验证token时出错: %w\", err)\r\n+\t}\r\n+\terr := h.s.PublishVideo(token, videoData, title)\r\n+\r\n+\tuserID := claims.UserID\r\n+\r\n+\tuser, err := s.r.GetUserById(userID)\r\n+\tif err != nil {\r\n+\t\treturn fmt.Errorf(\"获取用户信息时出错: %w\", err)\r\n+\t}\r\n+\r\n+\tif user == nil {\r\n+\t\treturn errors.New(\"用户不存在\")\r\n+\t}\r\n+\r\n+\t// 处理视频数据，保存到本地或对象存储，这里假设保存在本地\r\n+\tvideoPath := fmt.Sprintf(\"videos/%d_%s.mp4\", userID, time.Now().Format(\"20060102150405\"))\r\n+\tif err := s.saveVideoData(videoData, videoPath); err != nil {\r\n+\t\treturn fmt.Errorf(\"保存视频文件时出错: %w\", err)\r\n+\t}\r\n+\r\n+\t// 创建视频记录\r\n+\tvideo := &model.Video{\r\n+\t\tAuthorID:      userID,\r\n+\t\tTitle:         title,\r\n+\t\tVideoFilePath: videoPath,\r\n+\t\tCreateTime:    time.Now(),\r\n+\t}\r\n+\r\n+\tif err := s.r.CreateVideo(video); err != nil {\r\n+\t\treturn fmt.Errorf(\"创建视频记录时出错: %w\", err)\r\n+\t}\r\n+\r\n+\treturn nil\r\n+}\r\n+\r\n+// 保存视频数据\r\n+func (s *VideoService) saveVideoData(data []byte, filePath string) error {\r\n+\terr := ioutil.WriteFile(filePath, data, 0644)\r\n+\tif err != nil {\r\n+\t\treturn err\r\n+\t}\r\n+\treturn nil\r\n+}\r\n+// VideoService 类中的 GetPublishedVideos 函数\r\n+func (s *VideoService) GetPublishedVideos() ([]*model.Video, error) {\r\n+\tvideos, err := s.r.GetPublishedVideos()\r\n+\tif err != nil {\r\n+\t\treturn nil, fmt.Errorf(\"Failed to get videos from repository: %w\", err)\r\n+\t}\r\n+\treturn videos, nil\r\n+}\r\n"
                },
                {
                    "date": 1691501653039,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,9 +23,8 @@\n \tclaims, err := VerifyToken(token)\r\n \tif err != nil {\r\n \t\treturn fmt.Errorf(\"验证token时出错: %w\", err)\r\n \t}\r\n-\terr := h.s.PublishVideo(token, videoData, title)\r\n \r\n \tuserID := claims.UserID\r\n \r\n \tuser, err := s.r.GetUserById(userID)\r\n@@ -73,79 +72,4 @@\n \t\treturn nil, fmt.Errorf(\"Failed to get videos from repository: %w\", err)\r\n \t}\r\n \treturn videos, nil\r\n }\r\n-package service\r\n-\r\n-import (\r\n-\t\"errors\"\r\n-\t\"fmt\"\r\n-\t\"github.com/Coreychen4444/Users/model\"\r\n-\t\"github.com/Coreychen4444/Users/repository\"\r\n-\t// \"github.com/dgrijalva/jwt-go\"\r\n-\t\"io/ioutil\"\r\n-\t\"time\"\r\n-)\r\n-\r\n-type VideoService struct {\r\n-\tr *repository.DbRepository\r\n-}\r\n-\r\n-func NewVideoService(r *repository.DbRepository) *VideoService {\r\n-\treturn &VideoService{r: r}\r\n-}\r\n-\r\n-// 视频投稿\r\n-func (s *VideoService) PublishVideo(token string, videoData []byte, title string) error {\r\n-\tclaims, err := VerifyToken(token)\r\n-\tif err != nil {\r\n-\t\treturn fmt.Errorf(\"验证token时出错: %w\", err)\r\n-\t}\r\n-\r\n-\tuserID := claims.UserID\r\n-\r\n-\tuser, err := s.r.GetUserById(userID)\r\n-\tif err != nil {\r\n-\t\treturn fmt.Errorf(\"获取用户信息时出错: %w\", err)\r\n-\t}\r\n-\r\n-\tif user == nil {\r\n-\t\treturn errors.New(\"用户不存在\")\r\n-\t}\r\n-\r\n-\t// 处理视频数据，保存到本地或对象存储，这里假设保存在本地\r\n-\tvideoPath := fmt.Sprintf(\"videos/%d_%s.mp4\", userID, time.Now().Format(\"20060102150405\"))\r\n-\tif err := s.saveVideoData(videoData, videoPath); err != nil {\r\n-\t\treturn fmt.Errorf(\"保存视频文件时出错: %w\", err)\r\n-\t}\r\n-\r\n-\t// 创建视频记录\r\n-\tvideo := &model.Video{\r\n-\t\tAuthorID:      userID,\r\n-\t\tTitle:         title,\r\n-\t\tVideoFilePath: videoPath,\r\n-\t\tCreateTime:    time.Now(),\r\n-\t}\r\n-\r\n-\tif err := s.r.CreateVideo(video); err != nil {\r\n-\t\treturn fmt.Errorf(\"创建视频记录时出错: %w\", err)\r\n-\t}\r\n-\r\n-\treturn nil\r\n-}\r\n-\r\n-// 保存视频数据\r\n-func (s *VideoService) saveVideoData(data []byte, filePath string) error {\r\n-\terr := ioutil.WriteFile(filePath, data, 0644)\r\n-\tif err != nil {\r\n-\t\treturn err\r\n-\t}\r\n-\treturn nil\r\n-}\r\n-// VideoService 类中的 GetPublishedVideos 函数\r\n-func (s *VideoService) GetPublishedVideos() ([]*model.Video, error) {\r\n-\tvideos, err := s.r.GetPublishedVideos()\r\n-\tif err != nil {\r\n-\t\treturn nil, fmt.Errorf(\"Failed to get videos from repository: %w\", err)\r\n-\t}\r\n-\treturn videos, nil\r\n-}\r\n"
                },
                {
                    "date": 1691501737780,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,8 +40,13 @@\n \tvideoPath := fmt.Sprintf(\"videos/%d_%s.mp4\", userID, time.Now().Format(\"20060102150405\"))\r\n \tif err := s.saveVideoData(videoData, videoPath); err != nil {\r\n \t\treturn fmt.Errorf(\"保存视频文件时出错: %w\", err)\r\n \t}\r\n+\terr := h.s.PublishVideo(token, videoData, title)\r\n+if err != nil {\r\n+    c.JSON(http.StatusInternalServerError, gin.H{\"error\": fmt.Sprintf(\"Failed to publish video: %s\", err.Error())})\r\n+    return\r\n+}\r\n \r\n \t// 创建视频记录\r\n \tvideo := &model.Video{\r\n \t\tAuthorID:      userID,\r\n"
                },
                {
                    "date": 1691501760908,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,9 +40,9 @@\n \tvideoPath := fmt.Sprintf(\"videos/%d_%s.mp4\", userID, time.Now().Format(\"20060102150405\"))\r\n \tif err := s.saveVideoData(videoData, videoPath); err != nil {\r\n \t\treturn fmt.Errorf(\"保存视频文件时出错: %w\", err)\r\n \t}\r\n-\terr := h.s.PublishVideo(token, videoData, title)\r\n+\terr = h.s.PublishVideo(token, videoData, title)\r\n if err != nil {\r\n     c.JSON(http.StatusInternalServerError, gin.H{\"error\": fmt.Sprintf(\"Failed to publish video: %s\", err.Error())})\r\n     return\r\n }\r\n"
                },
                {
                    "date": 1691501773870,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,13 +40,9 @@\n \tvideoPath := fmt.Sprintf(\"videos/%d_%s.mp4\", userID, time.Now().Format(\"20060102150405\"))\r\n \tif err := s.saveVideoData(videoData, videoPath); err != nil {\r\n \t\treturn fmt.Errorf(\"保存视频文件时出错: %w\", err)\r\n \t}\r\n-\terr = h.s.PublishVideo(token, videoData, title)\r\n-if err != nil {\r\n-    c.JSON(http.StatusInternalServerError, gin.H{\"error\": fmt.Sprintf(\"Failed to publish video: %s\", err.Error())})\r\n-    return\r\n-}\r\n+\t\r\n \r\n \t// 创建视频记录\r\n \tvideo := &model.Video{\r\n \t\tAuthorID:      userID,\r\n"
                },
                {
                    "date": 1691503324811,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,9 +40,8 @@\n \tvideoPath := fmt.Sprintf(\"videos/%d_%s.mp4\", userID, time.Now().Format(\"20060102150405\"))\r\n \tif err := s.saveVideoData(videoData, videoPath); err != nil {\r\n \t\treturn fmt.Errorf(\"保存视频文件时出错: %w\", err)\r\n \t}\r\n-\t\r\n \r\n \t// 创建视频记录\r\n \tvideo := &model.Video{\r\n \t\tAuthorID:      userID,\r\n@@ -65,12 +64,4 @@\n \t\treturn err\r\n \t}\r\n \treturn nil\r\n }\r\n-// VideoService 类中的 GetPublishedVideos 函数\r\n-func (s *VideoService) GetPublishedVideos() ([]*model.Video, error) {\r\n-\tvideos, err := s.r.GetPublishedVideos()\r\n-\tif err != nil {\r\n-\t\treturn nil, fmt.Errorf(\"Failed to get videos from repository: %w\", err)\r\n-\t}\r\n-\treturn videos, nil\r\n-}\r\n"
                },
                {
                    "date": 1691503339434,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,8 +40,13 @@\n \tvideoPath := fmt.Sprintf(\"videos/%d_%s.mp4\", userID, time.Now().Format(\"20060102150405\"))\r\n \tif err := s.saveVideoData(videoData, videoPath); err != nil {\r\n \t\treturn fmt.Errorf(\"保存视频文件时出错: %w\", err)\r\n \t}\r\n+\terr = h.s.PublishVideo(token, videoData, title)\r\n+if err != nil {\r\n+    c.JSON(http.StatusInternalServerError, gin.H{\"error\": fmt.Sprintf(\"Failed to publish video: %s\", err.Error())})\r\n+    return\r\n+}\r\n \r\n \t// 创建视频记录\r\n \tvideo := &model.Video{\r\n \t\tAuthorID:      userID,\r\n@@ -64,4 +69,12 @@\n \t\treturn err\r\n \t}\r\n \treturn nil\r\n }\r\n+// VideoService 类中的 GetPublishedVideos 函数\r\n+func (s *VideoService) GetPublishedVideos() ([]*model.Video, error) {\r\n+\tvideos, err := s.r.GetPublishedVideos()\r\n+\tif err != nil {\r\n+\t\treturn nil, fmt.Errorf(\"Failed to get videos from repository: %w\", err)\r\n+\t}\r\n+\treturn videos, nil\r\n+}\r\n"
                },
                {
                    "date": 1691503345050,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,75 @@\n+package service\r\n+\r\n+import (\r\n+\t\"errors\"\r\n+\t\"fmt\"\r\n+\t\"github.com/Coreychen4444/Users/model\"\r\n+\t\"github.com/Coreychen4444/Users/repository\"\r\n+\t// \"github.com/dgrijalva/jwt-go\"\r\n+\t\"io/ioutil\"\r\n+\t\"time\"\r\n+)\r\n+\r\n+type VideoService struct {\r\n+\tr *repository.DbRepository\r\n+}\r\n+\r\n+func NewVideoService(r *repository.DbRepository) *VideoService {\r\n+\treturn &VideoService{r: r}\r\n+}\r\n+\r\n+// 视频投稿\r\n+func (s *VideoService) PublishVideo(token string, videoData []byte, title string) error {\r\n+\tclaims, err := VerifyToken(token)\r\n+\tif err != nil {\r\n+\t\treturn fmt.Errorf(\"验证token时出错: %w\", err)\r\n+\t}\r\n+\r\n+\tuserID := claims.UserID\r\n+\r\n+\tuser, err := s.r.GetUserById(userID)\r\n+\tif err != nil {\r\n+\t\treturn fmt.Errorf(\"获取用户信息时出错: %w\", err)\r\n+\t}\r\n+\r\n+\tif user == nil {\r\n+\t\treturn errors.New(\"用户不存在\")\r\n+\t}\r\n+\r\n+\t// 处理视频数据，保存到本地或对象存储，这里假设保存在本地\r\n+\tvideoPath := fmt.Sprintf(\"videos/%d_%s.mp4\", userID, time.Now().Format(\"20060102150405\"))\r\n+\tif err := s.saveVideoData(videoData, videoPath); err != nil {\r\n+\t\treturn fmt.Errorf(\"保存视频文件时出错: %w\", err)\r\n+\t}\r\n+\r\n+\t// 创建视频记录\r\n+\tvideo := &model.Video{\r\n+\t\tAuthorID:      userID,\r\n+\t\tTitle:         title,\r\n+\t\tVideoFilePath: videoPath,\r\n+\t\tCreateTime:    time.Now(),\r\n+\t}\r\n+\r\n+\tif err := s.r.CreateVideo(video); err != nil {\r\n+\t\treturn fmt.Errorf(\"创建视频记录时出错: %w\", err)\r\n+\t}\r\n+\r\n+\treturn nil\r\n+}\r\n+\r\n+// 保存视频数据\r\n+func (s *VideoService) saveVideoData(data []byte, filePath string) error {\r\n+\terr := ioutil.WriteFile(filePath, data, 0644)\r\n+\tif err != nil {\r\n+\t\treturn err\r\n+\t}\r\n+\treturn nil\r\n+}\r\n+// VideoService 类中的 GetPublishedVideos 函数\r\n+func (s *VideoService) GetPublishedVideos() ([]*model.Video, error) {\r\n+\tvideos, err := s.r.GetPublishedVideos()\r\n+\tif err != nil {\r\n+\t\treturn nil, fmt.Errorf(\"Failed to get videos from repository: %w\", err)\r\n+\t}\r\n+\treturn videos, nil\r\n+}\r\n"
                },
                {
                    "date": 1691503624532,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,74 @@\n+package service\r\n+\r\n+import (\r\n+\t\"errors\"\r\n+\t\"fmt\"\r\n+\t\"github.com/Coreychen4444/Users/model\"\r\n+\t\"github.com/Coreychen4444/Users/repository\"\r\n+\t// \"github.com/dgrijalva/jwt-go\"\r\n+\t\"io/ioutil\"\r\n+\t\"time\"\r\n+)\r\n+\r\n+type VideoService struct {\r\n+\tr *repository.DbRepository\r\n+}\r\n+\r\n+func NewVideoService(r *repository.DbRepository) *VideoService {\r\n+\treturn &VideoService{r: r}\r\n+}\r\n+\r\n+// 视频投稿\r\n+func (s *VideoService) PublishVideo(token string, videoData []byte, title string) error {\r\n+\tclaims, err := VerifyToken(token)\r\n+\tif err != nil {\r\n+\t\treturn fmt.Errorf(\"验证token时出错: %w\", err)\r\n+\t}\r\n+\r\n+\tuserID := claims.UserID\r\n+\r\n+\tuser, err := s.r.GetUserById(userID)\r\n+\tif err != nil {\r\n+\t\treturn fmt.Errorf(\"获取用户信息时出错: %w\", err)\r\n+\t}\r\n+\r\n+\tif user == nil {\r\n+\t\treturn errors.New(\"用户不存在\")\r\n+\t}\r\n+\r\n+\t// 处理视频数据，保存到本地或对象存储，这里假设保存在本地\r\n+\tvideoPath := fmt.Sprintf(\"videos/%d_%s.mp4\", userID, time.Now().Format(\"20060102150405\"))\r\n+\tif err := s.saveVideoData(videoData, videoPath); err != nil {\r\n+\t\treturn fmt.Errorf(\"保存视频文件时出错: %w\", err)\r\n+\t}\r\n+\r\n+\t// 创建视频记录\r\n+\tvideo := &model.Video{\r\n+\t\tAuthorID:      userID,\r\n+\t\tTitle:         title,\r\n+\t\tVideoFilePath: videoPath,\r\n+\t\tCreateTime:    time.Now(),\r\n+\t}\r\n+\r\n+\tif err := s.r.CreateVideo(video); err != nil {\r\n+\t\treturn fmt.Errorf(\"创建视频记录时出错: %w\", err)\r\n+\t}\r\n+\r\n+\treturn nil\r\n+}\r\n+\r\n+// 保存视频数据\r\n+func (s *VideoService) saveVideoData(data []byte, filePath string) error {\r\n+\terr := ioutil.WriteFile(filePath, data, 0644)\r\n+\tif err != nil {\r\n+\t\treturn err\r\n+\t}\r\n+\treturn nil\r\n+}\r\n+func (s *VideoService) GetPublishedVideos() ([]*model.Video, error) {\r\n+\tvideos, err := s.r.GetPublishedVideos()\r\n+\tif err != nil {\r\n+\t\treturn nil, fmt.Errorf(\"Failed to get videos from repository: %w\", err)\r\n+\t}\r\n+\treturn videos, nil\r\n+}\r\n"
                },
                {
                    "date": 1691504184702,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,78 @@\n+package service\r\n+\r\n+import (\r\n+\t\"errors\"\r\n+\t\"fmt\"\r\n+\t\"github.com/Coreychen4444/Users/model\"\r\n+\t\"github.com/Coreychen4444/Users/repository\"\r\n+\t// \"github.com/dgrijalva/jwt-go\"\r\n+\t\"io/ioutil\"\r\n+\t\"time\"\r\n+)\r\n+\r\n+type VideoService struct {\r\n+\tr *repository.DbRepository\r\n+}\r\n+\r\n+func NewVideoService(r *repository.DbRepository) *VideoService {\r\n+\treturn &VideoService{r: r}\r\n+}\r\n+\r\n+// 视频投稿\r\n+func (s *VideoService) PublishVideo(token string, videoData []byte, title string) error {\r\n+\tclaims, err := VerifyToken(token)\r\n+\tif err != nil {\r\n+\t\treturn fmt.Errorf(\"验证token时出错: %w\", err)\r\n+\t}\r\n+\r\n+\tuserID := claims.UserID\r\n+\r\n+\tuser, err := s.r.GetUserById(userID)\r\n+\tif err != nil {\r\n+\t\treturn fmt.Errorf(\"获取用户信息时出错: %w\", err)\r\n+\t}\r\n+\r\n+\tif user == nil {\r\n+\t\treturn errors.New(\"用户不存在\")\r\n+\t}\r\n+\r\n+\t// 处理视频数据，保存到本地或对象存储，这里假设保存在本地\r\n+\tvideoPath := fmt.Sprintf(\"videos/%d_%s.mp4\", userID, time.Now().Format(\"20060102150405\"))\r\n+\tif err := s.saveVideoData(videoData, videoPath); err != nil {\r\n+\t\treturn fmt.Errorf(\"保存视频文件时出错: %w\", err)\r\n+\t}\r\n+\r\n+\t// 创建视频记录\r\n+\tvideo := &model.Video{\r\n+\t\tAuthorID:      userID,\r\n+\t\tTitle:         title,\r\n+\t\tVideoFilePath: videoPath,\r\n+\t\tCreateTime:    time.Now(),\r\n+\t}\r\n+\r\n+\tif err := s.r.CreateVideo(video); err != nil {\r\n+\t\treturn fmt.Errorf(\"创建视频记录时出错: %w\", err)\r\n+\t}\r\n+\r\n+\treturn nil\r\n+}\r\n+\r\n+// 保存视频数据\r\n+func (s *VideoService) saveVideoData(data []byte, filePath string) error {\r\n+\terr := ioutil.WriteFile(filePath, data, 0644)\r\n+\tif err != nil {\r\n+\t\treturn err\r\n+\t}\r\n+\treturn nil\r\n+}\r\n+func (s *VideoService) GetPublishedVideos() ([]*model.Video, error) {\r\n+\r\n+\t// 从仓库获取已发布视频\r\n+\tvideos, err := s.r.GetPublishedVideos()\r\n+\tif err != nil {\r\n+\t\t// 如果获取视频失败，则返回错误信息\r\n+\t\treturn nil, fmt.Errorf(\"从仓库获取视频失败: %w\", err)\r\n+\t}\r\n+\t// 返回已发布视频\r\n+\treturn videos, nil\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1691504194525,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -57,251 +57,17 @@\n \treturn nil\r\n }\r\n \r\n // 保存视频数据\r\n-func (s *VideoService) saveVideoData(data []byte, filePath string) error {\r\n-\terr := ioutil.WriteFile(filePath, data, 0644)\r\n-\tif err != nil {\r\n-\t\treturn err\r\n-\t}\r\n-\treturn nil\r\n-}\r\n+\r\n func (s *VideoService) GetPublishedVideos() ([]*model.Video, error) {\r\n \r\n \t// 从仓库获取已发布视频\r\n \tvideos, err := s.r.GetPublishedVideos()\r\n \tif err != nil {\r\n \t\t// 如果获取视频失败，则返回错误信息\r\n+func (s *VideoService) saveVideoData(data []byte, filePath string) error {\r\n \t\treturn nil, fmt.Errorf(\"从仓库获取视频失败: %w\", err)\r\n \t}\r\n \t// 返回已发布视频\r\n \treturn videos, nil\r\n-}\n-package service\r\n-\r\n-import (\r\n-\t\"errors\"\r\n-\t\"fmt\"\r\n-\t\"github.com/Coreychen4444/Users/model\"\r\n-\t\"github.com/Coreychen4444/Users/repository\"\r\n-\t// \"github.com/dgrijalva/jwt-go\"\r\n-\t\"io/ioutil\"\r\n-\t\"time\"\r\n-)\r\n-\r\n-type VideoService struct {\r\n-\tr *repository.DbRepository\r\n-}\r\n-\r\n-func NewVideoService(r *repository.DbRepository) *VideoService {\r\n-\treturn &VideoService{r: r}\r\n-}\r\n-\r\n-// 视频投稿\r\n-func (s *VideoService) PublishVideo(token string, videoData []byte, title string) error {\r\n-\tclaims, err := VerifyToken(token)\r\n-\tif err != nil {\r\n-\t\treturn fmt.Errorf(\"验证token时出错: %w\", err)\r\n-\t}\r\n-\r\n-\tuserID := claims.UserID\r\n-\r\n-\tuser, err := s.r.GetUserById(userID)\r\n-\tif err != nil {\r\n-\t\treturn fmt.Errorf(\"获取用户信息时出错: %w\", err)\r\n-\t}\r\n-\r\n-\tif user == nil {\r\n-\t\treturn errors.New(\"用户不存在\")\r\n-\t}\r\n-\r\n-\t// 处理视频数据，保存到本地或对象存储，这里假设保存在本地\r\n-\tvideoPath := fmt.Sprintf(\"videos/%d_%s.mp4\", userID, time.Now().Format(\"20060102150405\"))\r\n-\tif err := s.saveVideoData(videoData, videoPath); err != nil {\r\n-\t\treturn fmt.Errorf(\"保存视频文件时出错: %w\", err)\r\n-\t}\r\n-\r\n-\t// 创建视频记录\r\n-\tvideo := &model.Video{\r\n-\t\tAuthorID:      userID,\r\n-\t\tTitle:         title,\r\n-\t\tVideoFilePath: videoPath,\r\n-\t\tCreateTime:    time.Now(),\r\n-\t}\r\n-\r\n-\tif err := s.r.CreateVideo(video); err != nil {\r\n-\t\treturn fmt.Errorf(\"创建视频记录时出错: %w\", err)\r\n-\t}\r\n-\r\n-\treturn nil\r\n-}\r\n-\r\n-// 保存视频数据\r\n-func (s *VideoService) saveVideoData(data []byte, filePath string) error {\r\n-\terr := ioutil.WriteFile(filePath, data, 0644)\r\n-\tif err != nil {\r\n-\t\treturn err\r\n-\t}\r\n-\treturn nil\r\n-}\r\n-func (s *VideoService) GetPublishedVideos() ([]*model.Video, error) {\r\n-\tvideos, err := s.r.GetPublishedVideos()\r\n-\tif err != nil {\r\n-\t\treturn nil, fmt.Errorf(\"Failed to get videos from repository: %w\", err)\r\n-\t}\r\n-\treturn videos, nil\r\n-}\r\n-package service\r\n-\r\n-import (\r\n-\t\"errors\"\r\n-\t\"fmt\"\r\n-\t\"github.com/Coreychen4444/Users/model\"\r\n-\t\"github.com/Coreychen4444/Users/repository\"\r\n-\t// \"github.com/dgrijalva/jwt-go\"\r\n-\t\"io/ioutil\"\r\n-\t\"time\"\r\n-)\r\n-\r\n-type VideoService struct {\r\n-\tr *repository.DbRepository\r\n-}\r\n-\r\n-func NewVideoService(r *repository.DbRepository) *VideoService {\r\n-\treturn &VideoService{r: r}\r\n-}\r\n-\r\n-// 视频投稿\r\n-func (s *VideoService) PublishVideo(token string, videoData []byte, title string) error {\r\n-\tclaims, err := VerifyToken(token)\r\n-\tif err != nil {\r\n-\t\treturn fmt.Errorf(\"验证token时出错: %w\", err)\r\n-\t}\r\n-\r\n-\tuserID := claims.UserID\r\n-\r\n-\tuser, err := s.r.GetUserById(userID)\r\n-\tif err != nil {\r\n-\t\treturn fmt.Errorf(\"获取用户信息时出错: %w\", err)\r\n-\t}\r\n-\r\n-\tif user == nil {\r\n-\t\treturn errors.New(\"用户不存在\")\r\n-\t}\r\n-\r\n-\t// 处理视频数据，保存到本地或对象存储，这里假设保存在本地\r\n-\tvideoPath := fmt.Sprintf(\"videos/%d_%s.mp4\", userID, time.Now().Format(\"20060102150405\"))\r\n-\tif err := s.saveVideoData(videoData, videoPath); err != nil {\r\n-\t\treturn fmt.Errorf(\"保存视频文件时出错: %w\", err)\r\n-\t}\r\n-\r\n-\t// 创建视频记录\r\n-\tvideo := &model.Video{\r\n-\t\tAuthorID:      userID,\r\n-\t\tTitle:         title,\r\n-\t\tVideoFilePath: videoPath,\r\n-\t\tCreateTime:    time.Now(),\r\n-\t}\r\n-\r\n-\tif err := s.r.CreateVideo(video); err != nil {\r\n-\t\treturn fmt.Errorf(\"创建视频记录时出错: %w\", err)\r\n-\t}\r\n-\r\n-\treturn nil\r\n-}\r\n-\r\n-// 保存视频数据\r\n-func (s *VideoService) saveVideoData(data []byte, filePath string) error {\r\n-\terr := ioutil.WriteFile(filePath, data, 0644)\r\n-\tif err != nil {\r\n-\t\treturn err\r\n-\t}\r\n-\treturn nil\r\n-}\r\n-// VideoService 类中的 GetPublishedVideos 函数\r\n-func (s *VideoService) GetPublishedVideos() ([]*model.Video, error) {\r\n-\tvideos, err := s.r.GetPublishedVideos()\r\n-\tif err != nil {\r\n-\t\treturn nil, fmt.Errorf(\"Failed to get videos from repository: %w\", err)\r\n-\t}\r\n-\treturn videos, nil\r\n-}\r\n-package service\r\n-\r\n-import (\r\n-\t\"errors\"\r\n-\t\"fmt\"\r\n-\t\"github.com/Coreychen4444/Users/model\"\r\n-\t\"github.com/Coreychen4444/Users/repository\"\r\n-\t// \"github.com/dgrijalva/jwt-go\"\r\n-\t\"io/ioutil\"\r\n-\t\"time\"\r\n-)\r\n-\r\n-type VideoService struct {\r\n-\tr *repository.DbRepository\r\n-}\r\n-\r\n-func NewVideoService(r *repository.DbRepository) *VideoService {\r\n-\treturn &VideoService{r: r}\r\n-}\r\n-\r\n-// 视频投稿\r\n-func (s *VideoService) PublishVideo(token string, videoData []byte, title string) error {\r\n-\tclaims, err := VerifyToken(token)\r\n-\tif err != nil {\r\n-\t\treturn fmt.Errorf(\"验证token时出错: %w\", err)\r\n-\t}\r\n-\r\n-\tuserID := claims.UserID\r\n-\r\n-\tuser, err := s.r.GetUserById(userID)\r\n-\tif err != nil {\r\n-\t\treturn fmt.Errorf(\"获取用户信息时出错: %w\", err)\r\n-\t}\r\n-\r\n-\tif user == nil {\r\n-\t\treturn errors.New(\"用户不存在\")\r\n-\t}\r\n-\r\n-\t// 处理视频数据，保存到本地或对象存储，这里假设保存在本地\r\n-\tvideoPath := fmt.Sprintf(\"videos/%d_%s.mp4\", userID, time.Now().Format(\"20060102150405\"))\r\n-\tif err := s.saveVideoData(videoData, videoPath); err != nil {\r\n-\t\treturn fmt.Errorf(\"保存视频文件时出错: %w\", err)\r\n-\t}\r\n-\terr = h.s.PublishVideo(token, videoData, title)\r\n-if err != nil {\r\n-    c.JSON(http.StatusInternalServerError, gin.H{\"error\": fmt.Sprintf(\"Failed to publish video: %s\", err.Error())})\r\n-    return\r\n-}\r\n-\r\n-\t// 创建视频记录\r\n-\tvideo := &model.Video{\r\n-\t\tAuthorID:      userID,\r\n-\t\tTitle:         title,\r\n-\t\tVideoFilePath: videoPath,\r\n-\t\tCreateTime:    time.Now(),\r\n-\t}\r\n-\r\n-\tif err := s.r.CreateVideo(video); err != nil {\r\n-\t\treturn fmt.Errorf(\"创建视频记录时出错: %w\", err)\r\n-\t}\r\n-\r\n-\treturn nil\r\n-}\r\n-\r\n-// 保存视频数据\r\n-func (s *VideoService) saveVideoData(data []byte, filePath string) error {\r\n-\terr := ioutil.WriteFile(filePath, data, 0644)\r\n-\tif err != nil {\r\n-\t\treturn err\r\n-\t}\r\n-\treturn nil\r\n-}\r\n-// VideoService 类中的 GetPublishedVideos 函数\r\n-func (s *VideoService) GetPublishedVideos() ([]*model.Video, error) {\r\n-\tvideos, err := s.r.GetPublishedVideos()\r\n-\tif err != nil {\r\n-\t\treturn nil, fmt.Errorf(\"Failed to get videos from repository: %w\", err)\r\n-\t}\r\n-\treturn videos, nil\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1691504204117,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,72 @@\n+package service\r\n+\r\n+import (\r\n+\t\"errors\"\r\n+\t\"fmt\"\r\n+\t\"github.com/Coreychen4444/Users/model\"\r\n+\t\"github.com/Coreychen4444/Users/repository\"\r\n+\t// \"github.com/dgrijalva/jwt-go\"\r\n+\t\"io/ioutil\"\r\n+\t\"time\"\r\n+)\r\n+\r\n+type VideoService struct {\r\n+\tr *repository.DbRepository\r\n+}\r\n+\r\n+func NewVideoService(r *repository.DbRepository) *VideoService {\r\n+\treturn &VideoService{r: r}\r\n+}\r\n+\r\n+// 视频投稿\r\n+func (s *VideoService) PublishVideo(token string, videoData []byte, title string) error {\r\n+\tclaims, err := VerifyToken(token)\r\n+\tif err != nil {\r\n+\t\treturn fmt.Errorf(\"验证token时出错: %w\", err)\r\n+\t}\r\n+\r\n+\tuserID := claims.UserID\r\n+\r\n+\tuser, err := s.r.GetUserById(userID)\r\n+\tif err != nil {\r\n+\t\treturn fmt.Errorf(\"获取用户信息时出错: %w\", err)\r\n+\t}\r\n+\r\n+\tif user == nil {\r\n+\t\treturn errors.New(\"用户不存在\")\r\n+\t}\r\n+\r\n+\t// 处理视频数据，保存到本地或对象存储，这里假设保存在本地\r\n+\tvideoPath := fmt.Sprintf(\"videos/%d_%s.mp4\", userID, time.Now().Format(\"20060102150405\"))\r\n+\tif err := s.saveVideoData(videoData, videoPath); err != nil {\r\n+\t\treturn fmt.Errorf(\"保存视频文件时出错: %w\", err)\r\n+\t}\r\n+\r\n+\t// 创建视频记录\r\n+\tvideo := &model.Video{\r\n+\t\tAuthorID:      userID,\r\n+\t\tTitle:         title,\r\n+\t\tVideoFilePath: videoPath,\r\n+\t\tCreateTime:    time.Now(),\r\n+\t}\r\n+\r\n+\tif err := s.r.CreateVideo(video); err != nil {\r\n+\t\treturn fmt.Errorf(\"创建视频记录时出错: %w\", err)\r\n+\t}\r\n+\r\n+\treturn nil\r\n+}\r\n+\r\n+// 保存视频数据\r\n+\r\n+func (s *VideoService) GetPublishedVideos() ([]*model.Video, error) {\r\n+\r\n+\t// 从仓库获取已发布视频\r\n+\tvideos, err := s.r.GetPublishedVideos()\r\n+\tif err != nil {\r\n+\t\t// 如果获取视频失败，则返回错误信息\r\n+\t\treturn nil, fmt.Errorf(\"从仓库获取视频失败: %w\", err)\r\n+\t}\r\n+\t// 返回已发布视频\r\n+\treturn videos, nil\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1691504222697,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,10 +14,15 @@\n \tr *repository.DbRepository\r\n }\r\n \r\n func NewVideoService(r *repository.DbRepository) *VideoService {\r\n+\r\n+\r\n \treturn &VideoService{r: r}\r\n }\r\n+// 根据文件扩展名创建视频服务\r\n+// 参数：r 数据库仓库\r\n+// 返回值：视频服务指针\r\n \r\n // 视频投稿\r\n func (s *VideoService) PublishVideo(token string, videoData []byte, title string) error {\r\n \tclaims, err := VerifyToken(token)\r\n@@ -57,88 +62,21 @@\n \treturn nil\r\n }\r\n \r\n // 保存视频数据\r\n-\r\n-func (s *VideoService) GetPublishedVideos() ([]*model.Video, error) {\r\n-\r\n-\t// 从仓库获取已发布视频\r\n-\tvideos, err := s.r.GetPublishedVideos()\r\n+func (s *VideoService) saveVideoData(data []byte, filePath string) error {\r\n+\terr := ioutil.WriteFile(filePath, data, 0644)\r\n \tif err != nil {\r\n-\t\t// 如果获取视频失败，则返回错误信息\r\n-\t\treturn nil, fmt.Errorf(\"从仓库获取视频失败: %w\", err)\r\n+\t\treturn err\r\n \t}\r\n-\t// 返回已发布视频\r\n-\treturn videos, nil\r\n-}\n-package service\r\n-\r\n-import (\r\n-\t\"errors\"\r\n-\t\"fmt\"\r\n-\t\"github.com/Coreychen4444/Users/model\"\r\n-\t\"github.com/Coreychen4444/Users/repository\"\r\n-\t// \"github.com/dgrijalva/jwt-go\"\r\n-\t\"io/ioutil\"\r\n-\t\"time\"\r\n-)\r\n-\r\n-type VideoService struct {\r\n-\tr *repository.DbRepository\r\n-}\r\n-\r\n-func NewVideoService(r *repository.DbRepository) *VideoService {\r\n-\treturn &VideoService{r: r}\r\n-}\r\n-\r\n-// 视频投稿\r\n-func (s *VideoService) PublishVideo(token string, videoData []byte, title string) error {\r\n-\tclaims, err := VerifyToken(token)\r\n-\tif err != nil {\r\n-\t\treturn fmt.Errorf(\"验证token时出错: %w\", err)\r\n-\t}\r\n-\r\n-\tuserID := claims.UserID\r\n-\r\n-\tuser, err := s.r.GetUserById(userID)\r\n-\tif err != nil {\r\n-\t\treturn fmt.Errorf(\"获取用户信息时出错: %w\", err)\r\n-\t}\r\n-\r\n-\tif user == nil {\r\n-\t\treturn errors.New(\"用户不存在\")\r\n-\t}\r\n-\r\n-\t// 处理视频数据，保存到本地或对象存储，这里假设保存在本地\r\n-\tvideoPath := fmt.Sprintf(\"videos/%d_%s.mp4\", userID, time.Now().Format(\"20060102150405\"))\r\n-\tif err := s.saveVideoData(videoData, videoPath); err != nil {\r\n-\t\treturn fmt.Errorf(\"保存视频文件时出错: %w\", err)\r\n-\t}\r\n-\r\n-\t// 创建视频记录\r\n-\tvideo := &model.Video{\r\n-\t\tAuthorID:      userID,\r\n-\t\tTitle:         title,\r\n-\t\tVideoFilePath: videoPath,\r\n-\t\tCreateTime:    time.Now(),\r\n-\t}\r\n-\r\n-\tif err := s.r.CreateVideo(video); err != nil {\r\n-\t\treturn fmt.Errorf(\"创建视频记录时出错: %w\", err)\r\n-\t}\r\n-\r\n \treturn nil\r\n }\r\n-\r\n-// 保存视频数据\r\n-\r\n func (s *VideoService) GetPublishedVideos() ([]*model.Video, error) {\r\n \r\n \t// 从仓库获取已发布视频\r\n \tvideos, err := s.r.GetPublishedVideos()\r\n \tif err != nil {\r\n \t\t// 如果获取视频失败，则返回错误信息\r\n-func (s *VideoService) saveVideoData(data []byte, filePath string) error {\r\n \t\treturn nil, fmt.Errorf(\"从仓库获取视频失败: %w\", err)\r\n \t}\r\n \t// 返回已发布视频\r\n \treturn videos, nil\r\n"
                },
                {
                    "date": 1691504243054,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,14 +10,14 @@\n \t\"time\"\r\n )\r\n \r\n type VideoService struct {\r\n-\tr *repository.DbRepository\r\n-}\r\n \r\n-func NewVideoService(r *repository.DbRepository) *VideoService {\r\n \r\n+\tr *repository.DbRepository // DbRepository类型的指针r\r\n+}func NewVideoService(r *repository.DbRepository) *VideoService {\r\n \r\n+\r\n \treturn &VideoService{r: r}\r\n }\r\n // 根据文件扩展名创建视频服务\r\n // 参数：r 数据库仓库\r\n"
                },
                {
                    "date": 1691504248402,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,9 +13,10 @@\n type VideoService struct {\r\n \r\n \r\n \tr *repository.DbRepository // DbRepository类型的指针r\r\n-}func NewVideoService(r *repository.DbRepository) *VideoService {\r\n+}\r\n+func NewVideoService(r *repository.DbRepository) *VideoService {\r\n \r\n \r\n \treturn &VideoService{r: r}\r\n }\r\n"
                }
            ],
            "date": 1691485552926,
            "name": "Commit-0",
            "content": "package service\r\n\r\nimport (\r\n\t\"errors\"\r\n\t\"fmt\"\r\n\t\"io/ioutil\"\r\n\t\"time\"\r\n\r\n\t\"github.com/Coreychen4444/Douyin/core\"\r\n\t\"github.com/Coreychen4444/Douyin/model\"\r\n\t\"github.com/Coreychen4444/Douyin/repository\"\r\n)\r\n\r\ntype VideoService struct {\r\n\trepo *repository.DbRepository\r\n}\r\n\r\nfunc NewVideoService(repo *repository.DbRepository) *VideoService {\r\n\treturn &VideoService{repo: repo}\r\n}\r\n\r\n// PublishVideo 实现视频投稿功能\r\nfunc (s *VideoService) PublishVideo(token string, videoData []byte, title string) error {\r\n\t// 验证用户 token\r\n\tuserID, err := VerifyToken(token)\r\n\tif err != nil {\r\n\t\treturn fmt.Errorf(\"验证token时出错: %w\", err)\r\n\t}\r\n\r\n\t// 获取用户信息\r\n\tuser, err := s.repo.GetUserById(userID)\r\n\tif err != nil {\r\n\t\treturn fmt.Errorf(\"获取用户信息时出错: %w\", err)\r\n\t}\r\n\r\n\tif user == nil {\r\n\t\treturn errors.New(\"用户不存在\")\r\n\t}\r\n\r\n\t// 将视频数据保存到本地或对象存储\r\n\tvideoPath := fmt.Sprintf(\"videos/%d_%s.mp4\", userID, time.Now().Format(\"20060102150405\"))\r\n\tif err := ioutil.WriteFile(videoPath, videoData, 0644); err != nil {\r\n\t\treturn fmt.Errorf(\"保存视频文件时出错: %w\", err)\r\n\t}\r\n\r\n\t// 创建视频记录\r\n\tvideo := &model.Video{\r\n\t\tAuthorID:      userID,\r\n\t\tTitle:         title,\r\n\t\tVideoFilePath: videoPath,\r\n\t\tCreateTime:    time.Now(),\r\n\t}\r\n\r\n\tif _, err := s.repo.CreateVideo(video); err != nil {\r\n\t\treturn fmt.Errorf(\"创建视频记录时出错: %w\", err)\r\n\t}\r\n\r\n\treturn nil\r\n}\r\n"
        }
    ]
}